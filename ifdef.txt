63fc1a9e08 ("Robert P. J. Day"       2006-07-02 19:47:05 +0000   1) /* vi: set sw=4 ts=4: */
b963875a3e (Glenn L McGrath          2002-12-02 00:01:36 +0000   2) /*
0ef64bdb40 (Denys Vlasenko           2010-08-16 20:14:46 +0200   3)  * Licensed under GPLv2 or later, see file LICENSE in this source tree.
b963875a3e (Glenn L McGrath          2002-12-02 00:01:36 +0000   4)  */
421d9e5941 (Bernhard Reutner-Fischer 2006-04-03 16:39:31 +0000   5) #include "libbb.h"
b963875a3e (Glenn L McGrath          2002-12-02 00:01:36 +0000   6) 
0a4d0e8fbf (Bartosz Golaszewski      2015-08-25 13:10:00 +0200   7) /*
0a4d0e8fbf (Bartosz Golaszewski      2015-08-25 13:10:00 +0200   8)  * Return NULL if string is not prefixed with key. Return pointer to the
0a4d0e8fbf (Bartosz Golaszewski      2015-08-25 13:10:00 +0200   9)  * first character in string after the prefix key. If key is an empty string,
0a4d0e8fbf (Bartosz Golaszewski      2015-08-25 13:10:00 +0200  10)  * return pointer to the beginning of string.
0a4d0e8fbf (Bartosz Golaszewski      2015-08-25 13:10:00 +0200  11)  */
8dff01d06a (Denys Vlasenko           2015-03-12 17:48:34 +0100  12) char* FAST_FUNC is_prefixed_with(const char *string, const char *key)
8dff01d06a (Denys Vlasenko           2015-03-12 17:48:34 +0100  13) {
8dff01d06a (Denys Vlasenko           2015-03-12 17:48:34 +0100  14) #if 0	/* Two passes over key - probably slower */
8dff01d06a (Denys Vlasenko           2015-03-12 17:48:34 +0100  15) 	int len = strlen(key);
8dff01d06a (Denys Vlasenko           2015-03-12 17:48:34 +0100  16) 	if (strncmp(string, key, len) == 0)
8dff01d06a (Denys Vlasenko           2015-03-12 17:48:34 +0100  17) 		return string + len;
8dff01d06a (Denys Vlasenko           2015-03-12 17:48:34 +0100  18) 	return NULL;
8dff01d06a (Denys Vlasenko           2015-03-12 17:48:34 +0100  19) #else	/* Open-coded */
8dff01d06a (Denys Vlasenko           2015-03-12 17:48:34 +0100  20) 	while (*key != '\0') {
8dff01d06a (Denys Vlasenko           2015-03-12 17:48:34 +0100  21) 		if (*key != *string)
8dff01d06a (Denys Vlasenko           2015-03-12 17:48:34 +0100  22) 			return NULL;
8dff01d06a (Denys Vlasenko           2015-03-12 17:48:34 +0100  23) 		key++;
8dff01d06a (Denys Vlasenko           2015-03-12 17:48:34 +0100  24) 		string++;
8dff01d06a (Denys Vlasenko           2015-03-12 17:48:34 +0100  25) 	}
8dff01d06a (Denys Vlasenko           2015-03-12 17:48:34 +0100  26) 	return (char*)string;
8dff01d06a (Denys Vlasenko           2015-03-12 17:48:34 +0100  27) #endif
8dff01d06a (Denys Vlasenko           2015-03-12 17:48:34 +0100  28) }
8dff01d06a (Denys Vlasenko           2015-03-12 17:48:34 +0100  29) 
7448b513c8 (Bartosz Golaszewski      2015-08-25 16:36:43 +0200  30) /*
7448b513c8 (Bartosz Golaszewski      2015-08-25 16:36:43 +0200  31)  * Return NULL if string is not suffixed with key. Return pointer to the
7448b513c8 (Bartosz Golaszewski      2015-08-25 16:36:43 +0200  32)  * beginning of prefix key in string. If key is an empty string return pointer
7448b513c8 (Bartosz Golaszewski      2015-08-25 16:36:43 +0200  33)  * to the end of string.
7448b513c8 (Bartosz Golaszewski      2015-08-25 16:36:43 +0200  34)  */
7448b513c8 (Bartosz Golaszewski      2015-08-25 16:36:43 +0200  35) char* FAST_FUNC is_suffixed_with(const char *string, const char *key)
7448b513c8 (Bartosz Golaszewski      2015-08-25 16:36:43 +0200  36) {
7448b513c8 (Bartosz Golaszewski      2015-08-25 16:36:43 +0200  37) 	size_t key_len = strlen(key);
7448b513c8 (Bartosz Golaszewski      2015-08-25 16:36:43 +0200  38) 	ssize_t len_diff = strlen(string) - key_len;
7448b513c8 (Bartosz Golaszewski      2015-08-25 16:36:43 +0200  39) 
7448b513c8 (Bartosz Golaszewski      2015-08-25 16:36:43 +0200  40) 	if (len_diff >= 0) {
68acc0f835 (Denys Vlasenko           2015-08-25 21:47:33 +0200  41) 		string += len_diff;
68acc0f835 (Denys Vlasenko           2015-08-25 21:47:33 +0200  42) 		if (strcmp(string, key) == 0) {
68acc0f835 (Denys Vlasenko           2015-08-25 21:47:33 +0200  43) 			return (char*)string;
7448b513c8 (Bartosz Golaszewski      2015-08-25 16:36:43 +0200  44) 		}
7448b513c8 (Bartosz Golaszewski      2015-08-25 16:36:43 +0200  45) 	}
7448b513c8 (Bartosz Golaszewski      2015-08-25 16:36:43 +0200  46) 
7448b513c8 (Bartosz Golaszewski      2015-08-25 16:36:43 +0200  47) 	return NULL;
7448b513c8 (Bartosz Golaszewski      2015-08-25 16:36:43 +0200  48) }
7448b513c8 (Bartosz Golaszewski      2015-08-25 16:36:43 +0200  49) 
5af906e7c8 (Denis Vlasenko           2006-11-05 18:05:09 +0000  50) /* returns the array index of the string */
5af906e7c8 (Denis Vlasenko           2006-11-05 18:05:09 +0000  51) /* (index of first match is returned, or -1) */
defc1ea340 (Denis Vlasenko           2008-06-27 02:52:20 +0000  52) int FAST_FUNC index_in_str_array(const char *const string_array[], const char *key)
b963875a3e (Glenn L McGrath          2002-12-02 00:01:36 +0000  53) {
cc34344d91 ("Vladimir N. Oleynik"    2005-11-26 10:45:26 +0000  54) 	int i;
b963875a3e (Glenn L McGrath          2002-12-02 00:01:36 +0000  55) 
b963875a3e (Glenn L McGrath          2002-12-02 00:01:36 +0000  56) 	for (i = 0; string_array[i] != 0; i++) {
b963875a3e (Glenn L McGrath          2002-12-02 00:01:36 +0000  57) 		if (strcmp(string_array[i], key) == 0) {
cc34344d91 ("Vladimir N. Oleynik"    2005-11-26 10:45:26 +0000  58) 			return i;
b963875a3e (Glenn L McGrath          2002-12-02 00:01:36 +0000  59) 		}
b963875a3e (Glenn L McGrath          2002-12-02 00:01:36 +0000  60) 	}
5af906e7c8 (Denis Vlasenko           2006-11-05 18:05:09 +0000  61) 	return -1;
cad5364599 (Manuel Novoa III         2003-03-19 09:13:01 +0000  62) }
cad5364599 (Manuel Novoa III         2003-03-19 09:13:01 +0000  63) 
defc1ea340 (Denis Vlasenko           2008-06-27 02:52:20 +0000  64) int FAST_FUNC index_in_strings(const char *strings, const char *key)
990d0f63ee (Denis Vlasenko           2007-07-24 15:54:42 +0000  65) {
bcf91d2760 (Ron Yorston              2021-01-29 13:23:27 +0000  66) 	int j, idx = 0;
990d0f63ee (Denis Vlasenko           2007-07-24 15:54:42 +0000  67) 
d12fcc20da (Denis Vlasenko           2008-05-31 07:34:14 +0000  68) 	while (*strings) {
bcf91d2760 (Ron Yorston              2021-01-29 13:23:27 +0000  69) 		/* Do we see "key\0" at current position in strings? */
bcf91d2760 (Ron Yorston              2021-01-29 13:23:27 +0000  70) 		for (j = 0; *strings == key[j]; ++j) {
bcf91d2760 (Ron Yorston              2021-01-29 13:23:27 +0000  71) 			if (*strings++ == '\0') {
bcf91d2760 (Ron Yorston              2021-01-29 13:23:27 +0000  72) 				//bb_error_msg("found:'%s' i:%u", key, idx);
bcf91d2760 (Ron Yorston              2021-01-29 13:23:27 +0000  73) 				return idx; /* yes */
bcf91d2760 (Ron Yorston              2021-01-29 13:23:27 +0000  74) 			}
990d0f63ee (Denis Vlasenko           2007-07-24 15:54:42 +0000  75) 		}
bcf91d2760 (Ron Yorston              2021-01-29 13:23:27 +0000  76) 		/* No.  Move to the start of the next string. */
bcf91d2760 (Ron Yorston              2021-01-29 13:23:27 +0000  77) 		while (*strings++ != '\0')
bcf91d2760 (Ron Yorston              2021-01-29 13:23:27 +0000  78) 			continue;
990d0f63ee (Denis Vlasenko           2007-07-24 15:54:42 +0000  79) 		idx++;
990d0f63ee (Denis Vlasenko           2007-07-24 15:54:42 +0000  80) 	}
990d0f63ee (Denis Vlasenko           2007-07-24 15:54:42 +0000  81) 	return -1;
990d0f63ee (Denis Vlasenko           2007-07-24 15:54:42 +0000  82) }
990d0f63ee (Denis Vlasenko           2007-07-24 15:54:42 +0000  83) 
5af906e7c8 (Denis Vlasenko           2006-11-05 18:05:09 +0000  84) /* returns the array index of the string, even if it matches only a beginning */
5af906e7c8 (Denis Vlasenko           2006-11-05 18:05:09 +0000  85) /* (index of first match is returned, or -1) */
990d0f63ee (Denis Vlasenko           2007-07-24 15:54:42 +0000  86) #ifdef UNUSED
defc1ea340 (Denis Vlasenko           2008-06-27 02:52:20 +0000  87) int FAST_FUNC index_in_substr_array(const char *const string_array[], const char *key)
5af906e7c8 (Denis Vlasenko           2006-11-05 18:05:09 +0000  88) {
5af906e7c8 (Denis Vlasenko           2006-11-05 18:05:09 +0000  89) 	int i;
8dff01d06a (Denys Vlasenko           2015-03-12 17:48:34 +0100  90) 	if (key[0]) {
eceecea568 (Bernhard Reutner-Fischer 2007-03-30 14:43:27 +0000  91) 		for (i = 0; string_array[i] != 0; i++) {
8dff01d06a (Denys Vlasenko           2015-03-12 17:48:34 +0100  92) 			if (is_prefixed_with(string_array[i], key)) {
eceecea568 (Bernhard Reutner-Fischer 2007-03-30 14:43:27 +0000  93) 				return i;
eceecea568 (Bernhard Reutner-Fischer 2007-03-30 14:43:27 +0000  94) 			}
5af906e7c8 (Denis Vlasenko           2006-11-05 18:05:09 +0000  95) 		}
5af906e7c8 (Denis Vlasenko           2006-11-05 18:05:09 +0000  96) 	}
5af906e7c8 (Denis Vlasenko           2006-11-05 18:05:09 +0000  97) 	return -1;
5af906e7c8 (Denis Vlasenko           2006-11-05 18:05:09 +0000  98) }
990d0f63ee (Denis Vlasenko           2007-07-24 15:54:42 +0000  99) #endif
990d0f63ee (Denis Vlasenko           2007-07-24 15:54:42 +0000 100) 
defc1ea340 (Denis Vlasenko           2008-06-27 02:52:20 +0000 101) int FAST_FUNC index_in_substrings(const char *strings, const char *key)
990d0f63ee (Denis Vlasenko           2007-07-24 15:54:42 +0000 102) {
8a659f6ff9 (Denys Vlasenko           2010-04-03 00:52:16 +0200 103) 	int matched_idx = -1;
8a659f6ff9 (Denys Vlasenko           2010-04-03 00:52:16 +0200 104) 	const int len = strlen(key);
990d0f63ee (Denis Vlasenko           2007-07-24 15:54:42 +0000 105) 
990d0f63ee (Denis Vlasenko           2007-07-24 15:54:42 +0000 106) 	if (len) {
990d0f63ee (Denis Vlasenko           2007-07-24 15:54:42 +0000 107) 		int idx = 0;
d12fcc20da (Denis Vlasenko           2008-05-31 07:34:14 +0000 108) 		while (*strings) {
990d0f63ee (Denis Vlasenko           2007-07-24 15:54:42 +0000 109) 			if (strncmp(strings, key, len) == 0) {
8a659f6ff9 (Denys Vlasenko           2010-04-03 00:52:16 +0200 110) 				if (strings[len] == '\0')
8a659f6ff9 (Denys Vlasenko           2010-04-03 00:52:16 +0200 111) 					return idx; /* exact match */
8a659f6ff9 (Denys Vlasenko           2010-04-03 00:52:16 +0200 112) 				if (matched_idx >= 0)
8a659f6ff9 (Denys Vlasenko           2010-04-03 00:52:16 +0200 113) 					return -1; /* ambiguous match */
8a659f6ff9 (Denys Vlasenko           2010-04-03 00:52:16 +0200 114) 				matched_idx = idx;
990d0f63ee (Denis Vlasenko           2007-07-24 15:54:42 +0000 115) 			}
990d0f63ee (Denis Vlasenko           2007-07-24 15:54:42 +0000 116) 			strings += strlen(strings) + 1; /* skip NUL */
990d0f63ee (Denis Vlasenko           2007-07-24 15:54:42 +0000 117) 			idx++;
990d0f63ee (Denis Vlasenko           2007-07-24 15:54:42 +0000 118) 		}
990d0f63ee (Denis Vlasenko           2007-07-24 15:54:42 +0000 119) 	}
8a659f6ff9 (Denys Vlasenko           2010-04-03 00:52:16 +0200 120) 	return matched_idx;
990d0f63ee (Denis Vlasenko           2007-07-24 15:54:42 +0000 121) }
bfc3d82256 (Denis Vlasenko           2007-11-04 04:10:17 +0000 122) 
defc1ea340 (Denis Vlasenko           2008-06-27 02:52:20 +0000 123) const char* FAST_FUNC nth_string(const char *strings, int n)
bfc3d82256 (Denis Vlasenko           2007-11-04 04:10:17 +0000 124) {
6b404431aa (Denis Vlasenko           2008-01-07 16:13:14 +0000 125) 	while (n) {
c9fc15359e (Martin Lewis             2020-06-11 15:45:58 -0500 126) 		if (*strings++ == '\0') {
c9fc15359e (Martin Lewis             2020-06-11 15:45:58 -0500 127) 			if (*strings == '\0') /* reached end of strings */
c9fc15359e (Martin Lewis             2020-06-11 15:45:58 -0500 128) 				break;
c9fc15359e (Martin Lewis             2020-06-11 15:45:58 -0500 129) 			n--;
c9fc15359e (Martin Lewis             2020-06-11 15:45:58 -0500 130) 		}
6b404431aa (Denis Vlasenko           2008-01-07 16:13:14 +0000 131) 	}
6b404431aa (Denis Vlasenko           2008-01-07 16:13:14 +0000 132) 	return strings;
bfc3d82256 (Denis Vlasenko           2007-11-04 04:10:17 +0000 133) }
8a659f6ff9 (Denys Vlasenko           2010-04-03 00:52:16 +0200 134) 
8a659f6ff9 (Denys Vlasenko           2010-04-03 00:52:16 +0200 135) #ifdef UNUSED_SO_FAR /* only brctl.c needs it yet */
8a659f6ff9 (Denys Vlasenko           2010-04-03 00:52:16 +0200 136) /* Returns 0 for no, 1 for yes or a negative value on error.  */
8a659f6ff9 (Denys Vlasenko           2010-04-03 00:52:16 +0200 137) smallint FAST_FUNC yesno(const char *str)
8a659f6ff9 (Denys Vlasenko           2010-04-03 00:52:16 +0200 138) {
8a659f6ff9 (Denys Vlasenko           2010-04-03 00:52:16 +0200 139) 	static const char no_yes[] ALIGN1 =
8a659f6ff9 (Denys Vlasenko           2010-04-03 00:52:16 +0200 140) 		"0\0" "off\0" "no\0"
8a659f6ff9 (Denys Vlasenko           2010-04-03 00:52:16 +0200 141) 		"1\0" "on\0" "yes\0";
8a659f6ff9 (Denys Vlasenko           2010-04-03 00:52:16 +0200 142) 	int ret = index_in_substrings(no_yes, str);
8a659f6ff9 (Denys Vlasenko           2010-04-03 00:52:16 +0200 143) 	return ret / 3;
8a659f6ff9 (Denys Vlasenko           2010-04-03 00:52:16 +0200 144) }
8a659f6ff9 (Denys Vlasenko           2010-04-03 00:52:16 +0200 145) #endif
b432923e29 (Bartosz Golaszewski      2015-08-25 13:09:59 +0200 146) 
b432923e29 (Bartosz Golaszewski      2015-08-25 13:09:59 +0200 147) #if ENABLE_UNIT_TEST
b432923e29 (Bartosz Golaszewski      2015-08-25 13:09:59 +0200 148) 
b432923e29 (Bartosz Golaszewski      2015-08-25 13:09:59 +0200 149) BBUNIT_DEFINE_TEST(is_prefixed_with)
b432923e29 (Bartosz Golaszewski      2015-08-25 13:09:59 +0200 150) {
b432923e29 (Bartosz Golaszewski      2015-08-25 13:09:59 +0200 151) 	BBUNIT_ASSERT_STREQ(" bar", is_prefixed_with("foo bar", "foo"));
b432923e29 (Bartosz Golaszewski      2015-08-25 13:09:59 +0200 152) 	BBUNIT_ASSERT_STREQ("bar", is_prefixed_with("foo bar", "foo "));
b432923e29 (Bartosz Golaszewski      2015-08-25 13:09:59 +0200 153) 	BBUNIT_ASSERT_STREQ("", is_prefixed_with("foo", "foo"));
b432923e29 (Bartosz Golaszewski      2015-08-25 13:09:59 +0200 154) 	BBUNIT_ASSERT_STREQ("foo", is_prefixed_with("foo", ""));
b432923e29 (Bartosz Golaszewski      2015-08-25 13:09:59 +0200 155) 	BBUNIT_ASSERT_STREQ("", is_prefixed_with("", ""));
b432923e29 (Bartosz Golaszewski      2015-08-25 13:09:59 +0200 156) 
b432923e29 (Bartosz Golaszewski      2015-08-25 13:09:59 +0200 157) 	BBUNIT_ASSERT_NULL(is_prefixed_with("foo", "bar foo"));
b432923e29 (Bartosz Golaszewski      2015-08-25 13:09:59 +0200 158) 	BBUNIT_ASSERT_NULL(is_prefixed_with("foo foo", "bar"));
b432923e29 (Bartosz Golaszewski      2015-08-25 13:09:59 +0200 159) 	BBUNIT_ASSERT_NULL(is_prefixed_with("", "foo"));
b432923e29 (Bartosz Golaszewski      2015-08-25 13:09:59 +0200 160) 
b432923e29 (Bartosz Golaszewski      2015-08-25 13:09:59 +0200 161) 	BBUNIT_ENDTEST;
b432923e29 (Bartosz Golaszewski      2015-08-25 13:09:59 +0200 162) }
b432923e29 (Bartosz Golaszewski      2015-08-25 13:09:59 +0200 163) 
7448b513c8 (Bartosz Golaszewski      2015-08-25 16:36:43 +0200 164) BBUNIT_DEFINE_TEST(is_suffixed_with)
7448b513c8 (Bartosz Golaszewski      2015-08-25 16:36:43 +0200 165) {
7448b513c8 (Bartosz Golaszewski      2015-08-25 16:36:43 +0200 166) 	BBUNIT_ASSERT_STREQ("bar", is_suffixed_with("foo bar", "bar"));
7448b513c8 (Bartosz Golaszewski      2015-08-25 16:36:43 +0200 167) 	BBUNIT_ASSERT_STREQ("foo", is_suffixed_with("foo", "foo"));
7448b513c8 (Bartosz Golaszewski      2015-08-25 16:36:43 +0200 168) 	BBUNIT_ASSERT_STREQ("", is_suffixed_with("foo", ""));
7448b513c8 (Bartosz Golaszewski      2015-08-25 16:36:43 +0200 169) 	BBUNIT_ASSERT_STREQ("", is_suffixed_with("", ""));
f085344d5c (Tito Ragusa              2015-09-15 23:38:01 +0200 170) 	BBUNIT_ASSERT_STREQ("foo", is_suffixed_with("barfoofoo", "foo"));
7448b513c8 (Bartosz Golaszewski      2015-08-25 16:36:43 +0200 171) 
7448b513c8 (Bartosz Golaszewski      2015-08-25 16:36:43 +0200 172) 	BBUNIT_ASSERT_NULL(is_suffixed_with("foo", "bar foo"));
7448b513c8 (Bartosz Golaszewski      2015-08-25 16:36:43 +0200 173) 	BBUNIT_ASSERT_NULL(is_suffixed_with("foo foo", "bar"));
7448b513c8 (Bartosz Golaszewski      2015-08-25 16:36:43 +0200 174) 	BBUNIT_ASSERT_NULL(is_suffixed_with("", "foo"));
7448b513c8 (Bartosz Golaszewski      2015-08-25 16:36:43 +0200 175) 
7448b513c8 (Bartosz Golaszewski      2015-08-25 16:36:43 +0200 176) 	BBUNIT_ENDTEST;
7448b513c8 (Bartosz Golaszewski      2015-08-25 16:36:43 +0200 177) }
7448b513c8 (Bartosz Golaszewski      2015-08-25 16:36:43 +0200 178) 
b432923e29 (Bartosz Golaszewski      2015-08-25 13:09:59 +0200 179) #endif /* ENABLE_UNIT_TEST */
