<<<<<<< HEAD
f7300841 (madmurphy 2020-02-05 03:39:25 +0000   1) /*  -*- Mode: C; indent-tabs-mode: nil; c-basic-offset: 4; tab-width: 4 -*-  */
f7300841 (madmurphy 2020-02-05 03:39:25 +0000   2) 
f7300841 (madmurphy 2020-02-05 03:39:25 +0000   3) /*@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ !START_OMISSION! @@@@@@@@@@@@@@@@@@@@@@@@@@@@@-
f7300841 (madmurphy 2020-02-05 03:39:25 +0000   4) 
6f6115d4 (madmurphy 2020-05-11 10:40:41 +0100   5) This is a marked **exact copy** of `src/confini.h`, in which replaceable
6f6115d4 (madmurphy 2020-05-11 10:40:41 +0100   6) sections have been wrapped within special tags that can be parsed and amended
863999ca (madmurphy 2021-09-25 02:12:16 +0100   7) by GNU Make during the build process, in order to create custom forks of the
6f6115d4 (madmurphy 2020-05-11 10:40:41 +0100   8) library.
f7300841 (madmurphy 2020-02-05 03:39:25 +0000   9) 
b2b5e30a (madmurphy 2020-03-01 05:15:02 +0000  10) If you want to contribute to the development of this project, please **use this
b2b5e30a (madmurphy 2020-03-01 05:15:02 +0000  11) file**, as `src/confini.h` is automatically generated from here.
f7300841 (madmurphy 2020-02-05 03:39:25 +0000  12) 
6f6115d4 (madmurphy 2020-05-11 10:40:41 +0100  13) For more information about the tags used here, please see the `NA_AMEND()`
6f6115d4 (madmurphy 2020-05-11 10:40:41 +0100  14) macro in `m4/not-autotools.m4` at https://github.com/madmurphy/not-autotools
b2b5e30a (madmurphy 2020-03-01 05:15:02 +0000  15) 
b2b5e30a (madmurphy 2020-03-01 05:15:02 +0000  16) The code below is distributed under the terms of the GPL license version 3 or
b2b5e30a (madmurphy 2020-03-01 05:15:02 +0000  17) any later version.
f7300841 (madmurphy 2020-02-05 03:39:25 +0000  18) 
f7300841 (madmurphy 2020-02-05 03:39:25 +0000  19) -@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ !END_OMISSION! @@@@@@@@@@@@@@@@@@@@@@@@@@@@@*/
f7300841 (madmurphy 2020-02-05 03:39:25 +0000  20) /*@@@@@@@@@@@@@@@@@@@@ !ENTRY_POINT(CONFINI_H_METADATA)! @@@@@@@@@@@@@@@@@@@@*/
f7300841 (madmurphy 2020-02-05 03:39:25 +0000  21) 
f7300841 (madmurphy 2020-02-05 03:39:25 +0000  22) 
863999ca (madmurphy 2021-09-25 02:12:16 +0100  23) #ifndef __CONFINI_H__
863999ca (madmurphy 2021-09-25 02:12:16 +0100  24) #define __CONFINI_H__
f7300841 (madmurphy 2020-02-05 03:39:25 +0000  25) 
f7300841 (madmurphy 2020-02-05 03:39:25 +0000  26) 
f7300841 (madmurphy 2020-02-05 03:39:25 +0000  27) 
f7300841 (madmurphy 2020-02-05 03:39:25 +0000  28) /*@@@@@@@@@@@@@@@@@@@ !START_EXCEPTION(STANDARD_HEADERS)! @@@@@@@@@@@@@@@@@@@*/
f7300841 (madmurphy 2020-02-05 03:39:25 +0000  29) #include <stdio.h>
f7300841 (madmurphy 2020-02-05 03:39:25 +0000  30) #include <stdbool.h>
f7300841 (madmurphy 2020-02-05 03:39:25 +0000  31) #include <stdint.h>
f7300841 (madmurphy 2020-02-05 03:39:25 +0000  32) /*@@@@@@@@@@@@@@@@@@@@ !END_EXCEPTION(STANDARD_HEADERS)! @@@@@@@@@@@@@@@@@@@@*/
f7300841 (madmurphy 2020-02-05 03:39:25 +0000  33) 
f7300841 (madmurphy 2020-02-05 03:39:25 +0000  34) 
f7300841 (madmurphy 2020-02-05 03:39:25 +0000  35) 
f7300841 (madmurphy 2020-02-05 03:39:25 +0000  36) #ifdef __cplusplus
f7300841 (madmurphy 2020-02-05 03:39:25 +0000  37) extern "C" {
f7300841 (madmurphy 2020-02-05 03:39:25 +0000  38) #endif
f7300841 (madmurphy 2020-02-05 03:39:25 +0000  39) 
f7300841 (madmurphy 2020-02-05 03:39:25 +0000  40) 
f7300841 (madmurphy 2020-02-05 03:39:25 +0000  41) 
f7300841 (madmurphy 2020-02-05 03:39:25 +0000  42) /*  PRIVATE (HEADER-SCOPED) MACROS  */
f7300841 (madmurphy 2020-02-05 03:39:25 +0000  43) 
f7300841 (madmurphy 2020-02-05 03:39:25 +0000  44) 
323660b7 (madmurphy 2020-10-06 07:58:28 +0100  45) #ifdef _LIBCONFINI_NOCCWARN_
323660b7 (madmurphy 2020-10-06 07:58:28 +0100  46) #define _LIBCONFINI_DO_PRAGMA_(PBODY)
323660b7 (madmurphy 2020-10-06 07:58:28 +0100  47) #define _LIBCONFINI_WARNING_(MSG)
323660b7 (madmurphy 2020-10-06 07:58:28 +0100  48) #elif defined(_MSC_VER)
323660b7 (madmurphy 2020-10-06 07:58:28 +0100  49) #define _LIBCONFINI_DO_PRAGMA_(PBODY) __pragma(PBODY)
323660b7 (madmurphy 2020-10-06 07:58:28 +0100  50) #define _LIBCONFINI_WARNING_(MSG) _LIBCONFINI_DO_PRAGMA_(message("*WARNING*: " MSG))
323660b7 (madmurphy 2020-10-06 07:58:28 +0100  51) #else
323660b7 (madmurphy 2020-10-06 07:58:28 +0100  52) #define _LIBCONFINI_DO_PRAGMA_(PBODY) _Pragma(#PBODY)
323660b7 (madmurphy 2020-10-06 07:58:28 +0100  53) #define _LIBCONFINI_WARNING_(MSG) _LIBCONFINI_DO_PRAGMA_(GCC warning #MSG)
323660b7 (madmurphy 2020-10-06 07:58:28 +0100  54) #endif
323660b7 (madmurphy 2020-10-06 07:58:28 +0100  55) 
b2b5e30a (madmurphy 2020-03-01 05:15:02 +0000  56) #define __INIFORMAT_TABLE_CB_FIELDS__(NAME, OFFSET, SIZE, DEFVAL) \
f7300841 (madmurphy 2020-02-05 03:39:25 +0000  57)     unsigned char NAME:SIZE;
b2b5e30a (madmurphy 2020-03-01 05:15:02 +0000  58) #define __INIFORMAT_TABLE_CB_DEFAULT__(NAME, OFFSET, SIZE, DEFVAL) DEFVAL,
b2b5e30a (madmurphy 2020-03-01 05:15:02 +0000  59) #define __INIFORMAT_TABLE_CB_ZERO__(NAME, OFFSET, SIZE, DEFVAL) 0,
f7300841 (madmurphy 2020-02-05 03:39:25 +0000  60) #define _LIBCONFINI_INIFORMAT_TYPE_ \
b2b5e30a (madmurphy 2020-03-01 05:15:02 +0000  61)     struct IniFormat { INIFORMAT_TABLE_AS(__INIFORMAT_TABLE_CB_FIELDS__) }
f7300841 (madmurphy 2020-02-05 03:39:25 +0000  62) #define _LIBCONFINI_DEFAULT_FORMAT_ \
b2b5e30a (madmurphy 2020-03-01 05:15:02 +0000  63)     { INIFORMAT_TABLE_AS(__INIFORMAT_TABLE_CB_DEFAULT__) }
f7300841 (madmurphy 2020-02-05 03:39:25 +0000  64) #define _LIBCONFINI_UNIXLIKE_FORMAT_ \
b2b5e30a (madmurphy 2020-03-01 05:15:02 +0000  65)     { INIFORMAT_TABLE_AS(__INIFORMAT_TABLE_CB_ZERO__) }
f7300841 (madmurphy 2020-02-05 03:39:25 +0000  66) 
f7300841 (madmurphy 2020-02-05 03:39:25 +0000  67) 
f7300841 (madmurphy 2020-02-05 03:39:25 +0000  68) 
f7300841 (madmurphy 2020-02-05 03:39:25 +0000  69) /*  PUBLIC MACROS  */
f7300841 (madmurphy 2020-02-05 03:39:25 +0000  70) 
f7300841 (madmurphy 2020-02-05 03:39:25 +0000  71) 
f7300841 (madmurphy 2020-02-05 03:39:25 +0000  72) /**
06d64022 (madmurphy 2020-09-24 12:22:56 +0100  73)     @brief  Call a user-given macro (that accepts four arguments) for each row
b2b5e30a (madmurphy 2020-03-01 05:15:02 +0000  74)             of the table
f7300841 (madmurphy 2020-02-05 03:39:25 +0000  75) **/
f7300841 (madmurphy 2020-02-05 03:39:25 +0000  76) /*
f7300841 (madmurphy 2020-02-05 03:39:25 +0000  77)     NOTE: The following table and the order of its rows **define** (and link
f7300841 (madmurphy 2020-02-05 03:39:25 +0000  78)     together) both the #IniFormat and #IniFormatNum data types declared in this
f7300841 (madmurphy 2020-02-05 03:39:25 +0000  79)     header
f7300841 (madmurphy 2020-02-05 03:39:25 +0000  80) */
f7300841 (madmurphy 2020-02-05 03:39:25 +0000  81) #define INIFORMAT_TABLE_AS(_____)                 /*  IniFormat table  *\
f7300841 (madmurphy 2020-02-05 03:39:25 +0000  82) 
f7300841 (madmurphy 2020-02-05 03:39:25 +0000  83)         NAME                      BIT  SIZE DEFAULT
f7300841 (madmurphy 2020-02-05 03:39:25 +0000  84)                                                                       */\
f7300841 (madmurphy 2020-02-05 03:39:25 +0000  85)  _____( delimiter_symbol,         0,   7,   INI_EQUALS                ) \
b2b5e30a (madmurphy 2020-03-01 05:15:02 +0000  86)  _____( case_sensitive,           7,   1,   false                     )/*
f7300841 (madmurphy 2020-02-05 03:39:25 +0000  87)                                                                       */\
f7300841 (madmurphy 2020-02-05 03:39:25 +0000  88)  _____( semicolon_marker,         8,   2,   INI_DISABLED_OR_COMMENT   ) \
f7300841 (madmurphy 2020-02-05 03:39:25 +0000  89)  _____( hash_marker,              10,  2,   INI_DISABLED_OR_COMMENT   ) \
f7300841 (madmurphy 2020-02-05 03:39:25 +0000  90)  _____( section_paths,            12,  2,   INI_ABSOLUTE_AND_RELATIVE ) \
f7300841 (madmurphy 2020-02-05 03:39:25 +0000  91)  _____( multiline_nodes,          14,  2,   INI_MULTILINE_EVERYWHERE  )/*
f7300841 (madmurphy 2020-02-05 03:39:25 +0000  92)                                                                       */\
b2b5e30a (madmurphy 2020-03-01 05:15:02 +0000  93)  _____( no_single_quotes,         16,  1,   false                     ) \
b2b5e30a (madmurphy 2020-03-01 05:15:02 +0000  94)  _____( no_double_quotes,         17,  1,   false                     ) \
b2b5e30a (madmurphy 2020-03-01 05:15:02 +0000  95)  _____( no_spaces_in_names,       18,  1,   false                     ) \
b2b5e30a (madmurphy 2020-03-01 05:15:02 +0000  96)  _____( implicit_is_not_empty,    19,  1,   false                     ) \
b2b5e30a (madmurphy 2020-03-01 05:15:02 +0000  97)  _____( do_not_collapse_values,   20,  1,   false                     ) \
b2b5e30a (madmurphy 2020-03-01 05:15:02 +0000  98)  _____( preserve_empty_quotes,    21,  1,   false                     ) \
b2b5e30a (madmurphy 2020-03-01 05:15:02 +0000  99)  _____( disabled_after_space,     22,  1,   false                     ) \
b2b5e30a (madmurphy 2020-03-01 05:15:02 +0000 100)  _____( disabled_can_be_implicit, 23,  1,   false                     )
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 101) 
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 102) 
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 103) 
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 104) /**
06d64022 (madmurphy 2020-09-24 12:22:56 +0100 105)     @brief  Check whether a format does _not_ support escape sequences
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 106) **/
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 107) #define INIFORMAT_HAS_NO_ESC(FORMAT) \
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 108)     (FORMAT.multiline_nodes == INI_NO_MULTILINE && \
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 109)     FORMAT.no_double_quotes && FORMAT.no_single_quotes)
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 110) 
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 111) 
323660b7 (madmurphy 2020-10-06 07:58:28 +0100 112) /**
323660b7 (madmurphy 2020-10-06 07:58:28 +0100 113)     @brief  Check whether a given `char *` data type points to the global
323660b7 (madmurphy 2020-10-06 07:58:28 +0100 114)             variable #INI_GLOBAL_IMPLICIT_VALUE or to any fragment of it
323660b7 (madmurphy 2020-10-06 07:58:28 +0100 115) **/
323660b7 (madmurphy 2020-10-06 07:58:28 +0100 116) #define INI_IS_IMPLICIT_SUBSTR(CHAR_PTR) \
323660b7 (madmurphy 2020-10-06 07:58:28 +0100 117)     (CHAR_PTR >= INI_GLOBAL_IMPLICIT_VALUE && CHAR_PTR <= \
323660b7 (madmurphy 2020-10-06 07:58:28 +0100 118)     INI_GLOBAL_IMPLICIT_VALUE + INI_GLOBAL_IMPLICIT_V_LEN)
323660b7 (madmurphy 2020-10-06 07:58:28 +0100 119) 
323660b7 (madmurphy 2020-10-06 07:58:28 +0100 120) 
323660b7 (madmurphy 2020-10-06 07:58:28 +0100 121) 
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 122) /*  PUBLIC TYPEDEFS  */
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 123) 
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 124) 
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 125) /**
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 126)     @brief  24-bit bitfield representing the format of an INI file (INI
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 127)             dialect)
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 128) **/
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 129) typedef _LIBCONFINI_INIFORMAT_TYPE_ IniFormat;
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 130) 
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 131) 
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 132) /**
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 133)     @brief  Global statistics about an INI file
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 134) **/
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 135) typedef struct IniStatistics {
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 136)     const IniFormat format;
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 137)     const size_t bytes;
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 138)     const size_t members;
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 139) } IniStatistics;
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 140) 
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 141) 
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 142) /**
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 143)     @brief  Dispatch of a single INI node
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 144) **/
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 145) typedef struct IniDispatch {
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 146)     const IniFormat format;
2ec22464 (madmurphy 2020-10-26 15:58:40 +0000 147)     uint_least8_t type;
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 148)     char * data;
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 149)     char * value;
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 150)     const char * append_to;
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 151)     size_t d_len;
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 152)     size_t v_len;
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 153)     size_t at_len;
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 154)     size_t dispatch_id;
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 155) } IniDispatch;
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 156) 
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 157) 
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 158) /**
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 159)     @brief  The unique ID of an INI format (24-bit maximum)
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 160) **/
2ec22464 (madmurphy 2020-10-26 15:58:40 +0000 161) typedef uint_least32_t IniFormatNum;
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 162) 
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 163) 
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 164) /**
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 165)     @brief  Callback function for handling an #IniStatistics structure
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 166) **/
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 167) typedef int (* IniStatsHandler) (
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 168)     IniStatistics * statistics,
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 169)     void * user_data
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 170) );
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 171) 
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 172) 
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 173) /**
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 174)     @brief  Callback function for handling an #IniDispatch structure
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 175) **/
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 176) typedef int (* IniDispHandler) (
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 177)     IniDispatch * dispatch,
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 178)     void * user_data
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 179) );
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 180) 
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 181) 
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 182) /**
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 183)     @brief  Callback function for handling an INI string belonging to a
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 184)             sequence of INI strings
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 185) **/
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 186) typedef int (* IniStrHandler) (
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 187)     char * ini_string,
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 188)     size_t string_length,
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 189)     size_t string_num,
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 190)     IniFormat format,
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 191)     void * user_data
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 192) );
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 193) 
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 194) 
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 195) /**
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 196)     @brief  Callback function for handling a selected fragment of an INI string
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 197) **/
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 198) typedef int (* IniSubstrHandler) (
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 199)     const char * ini_string,
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 200)     size_t fragm_offset,
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 201)     size_t fragm_length,
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 202)     size_t fragm_num,
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 203)     IniFormat format,
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 204)     void * user_data
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 205) );
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 206) 
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 207) 
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 208) 
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 209) /*  PUBLIC FUNCTIONS  */
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 210) 
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 211) 
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 212) extern int strip_ini_cache (
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 213)     register char * const ini_source,
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 214)     const size_t ini_length,
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 215)     const IniFormat format,
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 216)     const IniStatsHandler f_init,
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 217)     const IniDispHandler f_foreach,
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 218)     void * const user_data
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 219) );
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 220) 
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 221) /*@@@@@@@@@@@@@@@@@@@@@ !START_EXCEPTION(IO_FUNCTIONS)! @@@@@@@@@@@@@@@@@@@@@*/
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 222) 
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 223) extern int load_ini_file (
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 224)     FILE * const ini_file,
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 225)     const IniFormat format,
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 226)     const IniStatsHandler f_init,
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 227)     const IniDispHandler f_foreach,
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 228)     void * const user_data
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 229) );
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 230) 
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 231) 
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 232) extern int load_ini_path (
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 233)     const char * const path,
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 234)     const IniFormat format,
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 235)     const IniStatsHandler f_init,
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 236)     const IniDispHandler f_foreach,
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 237)     void * const user_data
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 238) );
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 239) 
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 240) /*@@@@@@@@@@@@@@@@@@@@@@ !END_EXCEPTION(IO_FUNCTIONS)! @@@@@@@@@@@@@@@@@@@@@@*/
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 241) 
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 242) extern bool ini_string_match_ss (
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 243)     const char * const simple_string_a,
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 244)     const char * const simple_string_b,
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 245)     const IniFormat format
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 246) );
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 247) 
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 248) 
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 249) extern bool ini_string_match_si (
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 250)     const char * const simple_string,
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 251)     const char * const ini_string,
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 252)     const IniFormat format
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 253) );
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 254) 
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 255) 
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 256) extern bool ini_string_match_ii (
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 257)     const char * const ini_string_a,
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 258)     const char * const ini_string_b,
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 259)     const IniFormat format
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 260) );
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 261) 
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 262) 
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 263) extern bool ini_array_match (
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 264)     const char * const ini_string_a,
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 265)     const char * const ini_string_b,
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 266)     const char delimiter,
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 267)     const IniFormat format
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 268) );
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 269) 
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 270) 
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 271) extern size_t ini_unquote (
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 272)     char * const ini_string,
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 273)     const IniFormat format
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 274) );
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 275) 
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 276) 
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 277) extern size_t ini_string_parse (
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 278)     char * const ini_string,
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 279)     const IniFormat format
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 280) );
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 281) 
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 282) 
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 283) extern size_t ini_array_get_length (
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 284)     const char * const ini_string,
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 285)     const char delimiter,
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 286)     const IniFormat format
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 287) );
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 288) 
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 289) 
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 290) extern int ini_array_foreach (
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 291)     const char * const ini_string,
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 292)     const char delimiter,
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 293)     const IniFormat format,
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 294)     const IniSubstrHandler f_foreach,
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 295)     void * const user_data
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 296) );
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 297) 
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 298) 
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 299) extern size_t ini_array_shift (
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 300)     const char ** const ini_strptr,
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 301)     const char delimiter,
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 302)     const IniFormat format
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 303) );
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 304) 
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 305) 
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 306) extern size_t ini_array_collapse (
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 307)     char * const ini_string,
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 308)     const char delimiter,
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 309)     const IniFormat format
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 310) );
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 311) 
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 312) 
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 313) extern char * ini_array_break (
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 314)     char * const ini_string,
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 315)     const char delimiter,
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 316)     const IniFormat format
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 317) );
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 318) 
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 319) 
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 320) extern char * ini_array_release (
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 321)     char ** const ini_strptr,
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 322)     const char delimiter,
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 323)     const IniFormat format
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 324) );
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 325) 
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 326) 
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 327) extern int ini_array_split (
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 328)     char * const ini_string,
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 329)     const char delimiter,
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 330)     const IniFormat format,
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 331)     const IniStrHandler f_foreach,
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 332)     void * const user_data
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 333) );
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 334) 
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 335) 
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 336) extern void ini_global_set_lowercase_mode (
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 337)     const bool lowercase
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 338) );
323660b7 (madmurphy 2020-10-06 07:58:28 +0100 339) #define ini_global_set_lowercase_mode \
323660b7 (madmurphy 2020-10-06 07:58:28 +0100 340)     _LIBCONFINI_WARNING_("deprecated function `ini_global_set_lowercase_mode()`") \
323660b7 (madmurphy 2020-10-06 07:58:28 +0100 341)     ini_global_set_lowercase_mode
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 342) 
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 343) 
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 344) extern void ini_global_set_implicit_value (
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 345)     char * const implicit_value,
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 346)     const size_t implicit_v_len
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 347) );
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 348) 
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 349) 
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 350) extern IniFormatNum ini_fton (
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 351)     const IniFormat format
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 352) );
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 353) 
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 354) 
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 355) extern IniFormat ini_ntof (
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 356)     const IniFormatNum format_id
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 357) );
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 358) 
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 359) 
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 360) extern int ini_get_bool (
2ec22464 (madmurphy 2020-10-26 15:58:40 +0000 361)     const char * const simple_string,
b2b5e30a (madmurphy 2020-03-01 05:15:02 +0000 362)     const int when_fail
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 363) );
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 364) 
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 365) 
2ec22464 (madmurphy 2020-10-26 15:58:40 +0000 366) extern int ini_get_bool_i (
2ec22464 (madmurphy 2020-10-26 15:58:40 +0000 367)     const char * const ini_string,
2ec22464 (madmurphy 2020-10-26 15:58:40 +0000 368)     const int when_fail,
2ec22464 (madmurphy 2020-10-26 15:58:40 +0000 369)     const IniFormat format
2ec22464 (madmurphy 2020-10-26 15:58:40 +0000 370) );
2ec22464 (madmurphy 2020-10-26 15:58:40 +0000 371) 
2ec22464 (madmurphy 2020-10-26 15:58:40 +0000 372) 
2ec22464 (madmurphy 2020-10-26 15:58:40 +0000 373) /*@@@@@@@@@@@@@@@@@@@@@ !START_EXCEPTION(LIBC_STR2NUM)! @@@@@@@@@@@@@@@@@@@@@*/
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 374) 
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 375) /*  PUBLIC LINKS  */
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 376) 
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 377) 
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 378) extern int (* const ini_get_int) (
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 379)     const char * ini_string
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 380) );
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 381) 
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 382) 
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 383) extern long int (* const ini_get_lint) (
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 384)     const char * ini_string
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 385) );
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 386) 
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 387) 
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 388) extern long long int (* const ini_get_llint) (
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 389)     const char * ini_string
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 390) );
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 391) 
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 392) 
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 393) extern double (* const ini_get_double) (
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 394)     const char * ini_string
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 395) );
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 396) 
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 397) 
323660b7 (madmurphy 2020-10-06 07:58:28 +0100 398) /*
2ec22464 (madmurphy 2020-10-26 15:58:40 +0000 399)     Legacy support -- please **do not use these functions**!
323660b7 (madmurphy 2020-10-06 07:58:28 +0100 400) */
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 401) #define ini_get_float \
323660b7 (madmurphy 2020-10-06 07:58:28 +0100 402)     _LIBCONFINI_WARNING_("function `ini_get_float()` is deprecated for parsing a `double` data type; use `ini_get_double()` instead") \
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 403)     ini_get_double
2ec22464 (madmurphy 2020-10-26 15:58:40 +0000 404) /*@@@@@@@@@@@@@@@@@@@@@@ !END_EXCEPTION(LIBC_STR2NUM)! @@@@@@@@@@@@@@@@@@@@@@*/
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 405) 
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 406) 
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 407) 
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 408) /*  PUBLIC CONSTANTS AND VARIABLES  */
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 409) 
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 410) 
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 411) /**
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 412)     @brief  Error mask (flags not present in user-generated interruptions)
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 413) **/
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 414) #define CONFINI_ERROR 252
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 415) 
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 416) 
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 417) /**
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 418)     @brief  Error codes
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 419) **/
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 420) enum ConfiniInterruptNo {
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 421)     CONFINI_SUCCESS = 0,    /**< There have been no interruptions, everything
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 422)                                  went well [value=0] **/
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 423)     CONFINI_IINTR = 1,      /**< Interrupted by the user during `f_init()`
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 424)                                  [value=1] **/
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 425)     CONFINI_FEINTR = 2,     /**< Interrupted by the user during `f_foreach()`
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 426)                                  [value=2] **/
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 427)     CONFINI_ENOENT = 4,     /**< File inaccessible [value=4] **/
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 428)     CONFINI_ENOMEM = 5,     /**< Error allocating virtual memory [value=5] **/
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 429)     CONFINI_EIO = 6,        /**< Error reading the file [value=6] **/
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 430)     CONFINI_EOOR = 7,       /**< Out-of-range error: callbacks are more than
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 431)                                  expected [value=7] **/
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 432)     CONFINI_EBADF = 8,      /**< The stream specified is not a seekable stream
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 433)                                  [value=8] **/
b2b5e30a (madmurphy 2020-03-01 05:15:02 +0000 434)     CONFINI_EFBIG = 9,      /**< File too large [value=9] **/
b2b5e30a (madmurphy 2020-03-01 05:15:02 +0000 435)     CONFINI_EROADDR = 10    /**< Address is read-only [value=10] **/
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 436) };
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 437) 
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 438) 
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 439) /**
323660b7 (madmurphy 2020-10-06 07:58:28 +0100 440)     @brief  Disabled flag (i.e. third bit, present only in non-active node
323660b7 (madmurphy 2020-10-06 07:58:28 +0100 441)             types)
323660b7 (madmurphy 2020-10-06 07:58:28 +0100 442) **/
323660b7 (madmurphy 2020-10-06 07:58:28 +0100 443) #define INI_DISABLED_FLAG 4
323660b7 (madmurphy 2020-10-06 07:58:28 +0100 444) 
323660b7 (madmurphy 2020-10-06 07:58:28 +0100 445) 
323660b7 (madmurphy 2020-10-06 07:58:28 +0100 446) /**
323660b7 (madmurphy 2020-10-06 07:58:28 +0100 447)     @brief  INI node types and possible values of #IniDispatch::type
323660b7 (madmurphy 2020-10-06 07:58:28 +0100 448) 
323660b7 (madmurphy 2020-10-06 07:58:28 +0100 449)     See also #INI_DISABLED_FLAG.
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 450) **/
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 451) enum IniNodeType {
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 452)     INI_UNKNOWN = 0,            /**< This is a node impossible to categorize
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 453)                                      [value=0] **/
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 454)     INI_VALUE = 1,              /**< Not used by **libconfini** (values are
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 455)                                      dispatched together with keys) -- but
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 456)                                      available for user's implementations
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 457)                                      [value=1] **/
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 458)     INI_KEY = 2,                /**< This is a key [value=2] **/
323660b7 (madmurphy 2020-10-06 07:58:28 +0100 459)     INI_SECTION = 3,            /**< This is a section path [value=3] **/
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 460)     INI_COMMENT = 4,            /**< This is a comment [value=4] **/
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 461)     INI_INLINE_COMMENT = 5,     /**< This is an inline comment [value=5] **/
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 462)     INI_DISABLED_KEY = 6,       /**< This is a disabled key [value=6] **/
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 463)     INI_DISABLED_SECTION = 7    /**< This is a disabled section path
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 464)                                      [value=7] **/
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 465) };
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 466) 
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 467) 
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 468) /**
b2b5e30a (madmurphy 2020-03-01 05:15:02 +0000 469)     @brief  Common array and key-value delimiters (but a delimiter may also be
b2b5e30a (madmurphy 2020-03-01 05:15:02 +0000 470)             any other ASCII character not present in this list)
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 471) **/
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 472) enum IniDelimiters {
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 473)     INI_ANY_SPACE = 0,  /**< In multi-line INIs:
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 474)                              `/(?:\\(?:\n\r?|\r\n?)|[\t \v\f])+/`, in
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 475)                              non-multi-line INIs: `/[\t \v\f])+/` **/
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 476)     INI_EQUALS = '=',   /**< Equals character (`=`) **/
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 477)     INI_COLON = ':',    /**< Colon character (`:`) **/
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 478)     INI_DOT = '.',      /**< Dot character (`.`) **/
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 479)     INI_COMMA = ','     /**< Comma character (`,`) **/
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 480) };
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 481) 
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 482) 
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 483) /**
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 484)     @brief  Possible values of #IniFormat::semicolon_marker and
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 485)             #IniFormat::hash_marker (i.e., meaning of `/\s+;/` and `/\s+#/` in
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 486)             respect to a format)
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 487) **/
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 488) enum IniCommentMarker {
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 489)     INI_DISABLED_OR_COMMENT = 0,    /**< This marker opens a comment or a
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 490)                                          disabled entry **/
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 491)     INI_ONLY_COMMENT = 1,           /**< This marker opens a comment **/
b2b5e30a (madmurphy 2020-03-01 05:15:02 +0000 492)     INI_IGNORE = 2,                 /**< This marker opens a comment that has
b2b5e30a (madmurphy 2020-03-01 05:15:02 +0000 493)                                          been marked for deletion and must not
b2b5e30a (madmurphy 2020-03-01 05:15:02 +0000 494)                                          be dispatched or counted **/
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 495)     INI_IS_NOT_A_MARKER = 3         /**< This is not a marker at all, but a
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 496)                                          normal character instead **/
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 497) };
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 498) 
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 499) 
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 500) /**
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 501)     @brief  Possible values of #IniFormat::section_paths
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 502) **/
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 503) enum IniSectionPaths {
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 504)     INI_ABSOLUTE_AND_RELATIVE = 0,  /**< Section paths starting with a dot
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 505)                                          express nesting to the current parent,
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 506)                                          to root otherwise **/
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 507)     INI_ABSOLUTE_ONLY = 1,          /**< Section paths starting with a dot will
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 508)                                          be cleaned of their leading dot and
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 509)                                          appended to root **/
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 510)     INI_ONE_LEVEL_ONLY = 2,         /**< Format supports sections, but the dot
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 511)                                          does not express nesting and is not a
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 512)                                          meta-character **/
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 513)     INI_NO_SECTIONS = 3             /**< Format does *not* support sections --
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 514)                                          `/\[[^\]]*\]/g`, if any, will be
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 515)                                          treated as keys! **/
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 516) };
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 517) 
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 518) 
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 519) /**
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 520)     @brief  Possible values of #IniFormat::multiline_nodes
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 521) **/
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 522) enum IniMultiline {
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 523)     INI_MULTILINE_EVERYWHERE = 0,       /**< Comments, section paths and keys
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 524)                                              -- disabled or not -- are allowed
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 525)                                              to be multi-line **/
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 526)     INI_BUT_COMMENTS = 1,               /**< Only section paths and keys --
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 527)                                              disabled or not -- are allowed to
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 528)                                              be multi-line **/
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 529)     INI_BUT_DISABLED_AND_COMMENTS = 2,  /**< Only active section paths and
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 530)                                              active keys are allowed to be
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 531)                                              multi-line **/
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 532)     INI_NO_MULTILINE = 3                /**< Multi-line escape sequences are
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 533)                                              disabled **/
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 534) };
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 535) 
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 536) 
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 537) /**
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 538)     @brief  A model format for standard INI files
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 539) **/
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 540) static const IniFormat INI_DEFAULT_FORMAT = _LIBCONFINI_DEFAULT_FORMAT_;
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 541) 
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 542) 
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 543) /**
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 544)     @brief  A model format for Unix-like .conf files (where space characters
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 545)             are delimiters between keys and values)
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 546) **/
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 547) /*  All fields are set to `0` here.  */
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 548) static const IniFormat INI_UNIXLIKE_FORMAT = _LIBCONFINI_UNIXLIKE_FORMAT_;
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 549) 
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 550) 
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 551) /**
323660b7 (madmurphy 2020-10-06 07:58:28 +0100 552) 
323660b7 (madmurphy 2020-10-06 07:58:28 +0100 553)     @brief          If set to `true`, key and section names in case-insensitive
323660b7 (madmurphy 2020-10-06 07:58:28 +0100 554)                     INI formats will be dispatched lowercase, verbatim
323660b7 (madmurphy 2020-10-06 07:58:28 +0100 555)                     otherwise (default value: `false`)
323660b7 (madmurphy 2020-10-06 07:58:28 +0100 556)     @deprecated     Deprecated since version 1.15.0 (it will be removed in
323660b7 (madmurphy 2020-10-06 07:58:28 +0100 557)                     version 2.0.0)
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 558) **/
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 559) extern bool INI_GLOBAL_LOWERCASE_MODE;
323660b7 (madmurphy 2020-10-06 07:58:28 +0100 560) #define INI_GLOBAL_LOWERCASE_MODE \
323660b7 (madmurphy 2020-10-06 07:58:28 +0100 561)     _LIBCONFINI_WARNING_("global variable `INI_GLOBAL_LOWERCASE_MODE` is deprecated") \
323660b7 (madmurphy 2020-10-06 07:58:28 +0100 562)     INI_GLOBAL_LOWERCASE_MODE
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 563) 
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 564) 
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 565) /**
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 566)     @brief  Value to be assigned to implicit keys (default value: `NULL`)
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 567) **/
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 568) extern char * INI_GLOBAL_IMPLICIT_VALUE;
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 569) 
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 570) 
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 571) /**
b2b5e30a (madmurphy 2020-03-01 05:15:02 +0000 572)     @brief  Length of the value assigned to implicit keys (default value: `0`)
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 573) **/
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 574) extern size_t INI_GLOBAL_IMPLICIT_V_LEN;
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 575) 
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 576) 
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 577) 
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 578) /*  CLEAN THE PRIVATE ENVIRONMENT  */
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 579) 
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 580) 
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 581) #undef _LIBCONFINI_UNIXLIKE_FORMAT_
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 582) #undef _LIBCONFINI_DEFAULT_FORMAT_
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 583) #undef _LIBCONFINI_INIFORMAT_TYPE_
b2b5e30a (madmurphy 2020-03-01 05:15:02 +0000 584) #undef __INIFORMAT_TABLE_CB_ZERO__
b2b5e30a (madmurphy 2020-03-01 05:15:02 +0000 585) #undef __INIFORMAT_TABLE_CB_DEFAULT__
b2b5e30a (madmurphy 2020-03-01 05:15:02 +0000 586) #undef __INIFORMAT_TABLE_CB_FIELDS__
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 587) 
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 588) 
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 589) 
863999ca (madmurphy 2021-09-25 02:12:16 +0100 590) /*  END OF `__CONFINI_H__`  */
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 591) 
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 592) 
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 593) #ifdef __cplusplus
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 594) }
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 595) #endif
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 596) 
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 597) 
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 598) #endif
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 599) 
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 600) 
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 601) /*  EOF  */
f7300841 (madmurphy 2020-02-05 03:39:25 +0000 602) 
=======
e1be2ecba4 (Daniel Gustafsson 2018-12-11 15:02:24 +0100 31) #ifdef DEBUGBUILD
f703cf971c (Daniel Stenberg   2022-09-01 10:16:24 +0200 32) CURLUcode Curl_parse_port(struct Curl_URL *u, struct dynbuf *host,
f703cf971c (Daniel Stenberg   2022-09-01 10:16:24 +0200 33)                           bool has_scheme);
e1be2ecba4 (Daniel Gustafsson 2018-12-11 15:02:24 +0100 34) #endif
>>>>>>> dev
