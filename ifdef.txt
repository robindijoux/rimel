052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000   1) /* lzo1x_9x.c -- implementation of the LZO1X-999 compression algorithm
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000   2) 
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000   3)    This file is part of the LZO real-time data compression library.
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000   4) 
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000   5)    Copyright (C) 2008 Markus Franz Xaver Johannes Oberhumer
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000   6)    Copyright (C) 2007 Markus Franz Xaver Johannes Oberhumer
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000   7)    Copyright (C) 2006 Markus Franz Xaver Johannes Oberhumer
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000   8)    Copyright (C) 2005 Markus Franz Xaver Johannes Oberhumer
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000   9)    Copyright (C) 2004 Markus Franz Xaver Johannes Oberhumer
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000  10)    Copyright (C) 2003 Markus Franz Xaver Johannes Oberhumer
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000  11)    Copyright (C) 2002 Markus Franz Xaver Johannes Oberhumer
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000  12)    Copyright (C) 2001 Markus Franz Xaver Johannes Oberhumer
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000  13)    Copyright (C) 2000 Markus Franz Xaver Johannes Oberhumer
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000  14)    Copyright (C) 1999 Markus Franz Xaver Johannes Oberhumer
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000  15)    Copyright (C) 1998 Markus Franz Xaver Johannes Oberhumer
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000  16)    Copyright (C) 1997 Markus Franz Xaver Johannes Oberhumer
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000  17)    Copyright (C) 1996 Markus Franz Xaver Johannes Oberhumer
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000  18)    All Rights Reserved.
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000  19) 
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000  20)    The LZO library is free software; you can redistribute it and/or
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000  21)    modify it under the terms of the GNU General Public License as
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000  22)    published by the Free Software Foundation; either version 2 of
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000  23)    the License, or (at your option) any later version.
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000  24) 
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000  25)    The LZO library is distributed in the hope that it will be useful,
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000  26)    but WITHOUT ANY WARRANTY; without even the implied warranty of
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000  27)    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000  28)    GNU General Public License for more details.
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000  29) 
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000  30)    You should have received a copy of the GNU General Public License
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000  31)    along with the LZO library; see the file COPYING.
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000  32)    If not, write to the Free Software Foundation, Inc.,
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000  33)    51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000  34) 
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000  35)    Markus F.X.J. Oberhumer
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000  36)    <markus@oberhumer.com>
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000  37)    http://www.oberhumer.com/opensource/lzo/
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000  38) */
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000  39) #include "libbb.h"
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000  40) 
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000  41) /* The following is probably only safe on Intel-compatible processors ... */
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000  42) #define LZO_UNALIGNED_OK_2
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000  43) #define LZO_UNALIGNED_OK_4
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000  44) 
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000  45) #include "liblzo.h"
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000  46) 
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000  47) #define LZO_MAX(a,b)        ((a) >= (b) ? (a) : (b))
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000  48) #define LZO_MIN(a,b)        ((a) <= (b) ? (a) : (b))
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000  49) #define LZO_MAX3(a,b,c)     ((a) >= (b) ? LZO_MAX(a,c) : LZO_MAX(b,c))
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000  50) 
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000  51) /***********************************************************************
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000  52) //
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000  53) ************************************************************************/
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000  54) #define SWD_N           M4_MAX_OFFSET   /* size of ring buffer */
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000  55) #define SWD_F           2048           /* upper limit for match length */
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000  56) 
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000  57) #define SWD_BEST_OFF    (LZO_MAX3(M2_MAX_LEN, M3_MAX_LEN, M4_MAX_LEN) + 1)
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000  58) 
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000  59) typedef struct {
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000  60) 	int init;
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000  61) 
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000  62) 	unsigned look;          /* bytes in lookahead buffer */
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000  63) 
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000  64) 	unsigned m_len;
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000  65) 	unsigned m_off;
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000  66) 
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000  67) 	const uint8_t *bp;
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000  68) 	const uint8_t *ip;
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000  69) 	const uint8_t *in;
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000  70) 	const uint8_t *in_end;
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000  71) 	uint8_t *out;
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000  72) 
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000  73) 	unsigned r1_lit;
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000  74) } lzo1x_999_t;
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000  75) 
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000  76) #define getbyte(c)  ((c).ip < (c).in_end ? *((c).ip)++ : (-1))
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000  77) 
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000  78) /* lzo_swd.c -- sliding window dictionary */
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000  79) 
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000  80) /***********************************************************************
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000  81) //
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000  82) ************************************************************************/
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000  83) #define SWD_UINT_MAX      USHRT_MAX
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000  84) 
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000  85) #ifndef SWD_HSIZE
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000  86) #  define SWD_HSIZE         16384
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000  87) #endif
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000  88) #ifndef SWD_MAX_CHAIN
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000  89) #  define SWD_MAX_CHAIN     2048
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000  90) #endif
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000  91) 
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000  92) #define HEAD3(b, p) \
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000  93) 	( ((0x9f5f * ((((b[p]<<5)^b[p+1])<<5) ^ b[p+2])) >> 5) & (SWD_HSIZE-1) )
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000  94) 
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000  95) #if defined(LZO_UNALIGNED_OK_2)
5117eff6f9 archival/libarchive/lzo1x_9x.c (Denys Vlasenko 2013-10-16 14:21:20 +0200  96) #  define HEAD2(b,p)      (* (bb__aliased_uint16_t *) &(b[p]))
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000  97) #else
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000  98) #  define HEAD2(b,p)      (b[p] ^ ((unsigned)b[p+1]<<8))
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000  99) #endif
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 100) #define NIL2              SWD_UINT_MAX
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 101) 
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 102) typedef struct lzo_swd {
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 103) 	/* public - "built-in" */
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 104) 
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 105) 	/* public - configuration */
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 106) 	unsigned max_chain;
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 107) 	int use_best_off;
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 108) 
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 109) 	/* public - output */
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 110) 	unsigned m_len;
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 111) 	unsigned m_off;
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 112) 	unsigned look;
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 113) 	int b_char;
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 114) #if defined(SWD_BEST_OFF)
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 115) 	unsigned best_off[SWD_BEST_OFF];
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 116) #endif
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 117) 
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 118) 	/* semi public */
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 119) 	lzo1x_999_t *c;
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 120) 	unsigned m_pos;
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 121) #if defined(SWD_BEST_OFF)
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 122) 	unsigned best_pos[SWD_BEST_OFF];
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 123) #endif
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 124) 
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 125) 	/* private */
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 126) 	unsigned ip;                /* input pointer (lookahead) */
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 127) 	unsigned bp;                /* buffer pointer */
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 128) 	unsigned rp;                /* remove pointer */
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 129) 
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 130) 	unsigned node_count;
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 131) 	unsigned first_rp;
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 132) 
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 133) 	uint8_t b[SWD_N + SWD_F];
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 134) 	uint8_t b_wrap[SWD_F]; /* must follow b */
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 135) 	uint16_t head3[SWD_HSIZE];
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 136) 	uint16_t succ3[SWD_N + SWD_F];
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 137) 	uint16_t best3[SWD_N + SWD_F];
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 138) 	uint16_t llen3[SWD_HSIZE];
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 139) #ifdef HEAD2
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 140) 	uint16_t head2[65536L];
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 141) #endif
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 142) } lzo_swd_t, *lzo_swd_p;
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 143) 
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 144) #define SIZEOF_LZO_SWD_T    (sizeof(lzo_swd_t))
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 145) 
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 146) 
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 147) /* Access macro for head3.
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 148)  * head3[key] may be uninitialized, but then its value will never be used.
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 149)  */
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 150) #define s_get_head3(s,key)    s->head3[key]
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 151) 
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 152) 
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 153) /***********************************************************************
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 154) //
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 155) ************************************************************************/
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 156) #define B_SIZE (SWD_N + SWD_F)
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 157) 
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 158) static int swd_init(lzo_swd_p s)
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 159) {
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 160) 	/* defaults */
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 161) 	s->node_count = SWD_N;
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 162) 
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 163) 	memset(s->llen3, 0, sizeof(s->llen3[0]) * (unsigned)SWD_HSIZE);
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 164) #ifdef HEAD2
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 165) 	memset(s->head2, 0xff, sizeof(s->head2[0]) * 65536L);
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 166) 	assert(s->head2[0] == NIL2);
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 167) #endif
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 168) 
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 169) 	s->ip = 0;
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 170) 	s->bp = s->ip;
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 171) 	s->first_rp = s->ip;
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 172) 
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 173) 	assert(s->ip + SWD_F <= B_SIZE);
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 174) 	s->look = (unsigned) (s->c->in_end - s->c->ip);
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 175) 	if (s->look > 0) {
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 176) 		if (s->look > SWD_F)
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 177) 			s->look = SWD_F;
6b9f163353 archival/lzo1x_9x.c            (Denys Vlasenko 2010-01-28 02:24:24 +0100 178) 		memcpy(&s->b[s->ip], s->c->ip, s->look);
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 179) 		s->c->ip += s->look;
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 180) 		s->ip += s->look;
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 181) 	}
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 182) 	if (s->ip == B_SIZE)
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 183) 		s->ip = 0;
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 184) 
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 185) 	s->rp = s->first_rp;
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 186) 	if (s->rp >= s->node_count)
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 187) 		s->rp -= s->node_count;
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 188) 	else
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 189) 		s->rp += B_SIZE - s->node_count;
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 190) 
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 191) 	return LZO_E_OK;
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 192) }
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 193) 
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 194) #define swd_pos2off(s,pos) \
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 195) 	(s->bp > (pos) ? s->bp - (pos) : B_SIZE - ((pos) - s->bp))
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 196) 
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 197) 
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 198) /***********************************************************************
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 199) //
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 200) ************************************************************************/
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 201) static void swd_getbyte(lzo_swd_p s)
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 202) {
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 203) 	int c;
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 204) 
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 205) 	if ((c = getbyte(*(s->c))) < 0) {
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 206) 		if (s->look > 0)
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 207) 			--s->look;
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 208) 	} else {
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 209) 		s->b[s->ip] = c;
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 210) 		if (s->ip < SWD_F)
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 211) 			s->b_wrap[s->ip] = c;
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 212) 	}
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 213) 	if (++s->ip == B_SIZE)
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 214) 		s->ip = 0;
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 215) 	if (++s->bp == B_SIZE)
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 216) 		s->bp = 0;
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 217) 	if (++s->rp == B_SIZE)
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 218) 		s->rp = 0;
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 219) }
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 220) 
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 221) 
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 222) /***********************************************************************
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 223) // remove node from lists
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 224) ************************************************************************/
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 225) static void swd_remove_node(lzo_swd_p s, unsigned node)
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 226) {
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 227) 	if (s->node_count == 0) {
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 228) 		unsigned key;
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 229) 
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 230) 		key = HEAD3(s->b,node);
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 231) 		assert(s->llen3[key] > 0);
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 232) 		--s->llen3[key];
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 233) 
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 234) #ifdef HEAD2
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 235) 		key = HEAD2(s->b,node);
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 236) 		assert(s->head2[key] != NIL2);
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 237) 		if ((unsigned) s->head2[key] == node)
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 238) 			s->head2[key] = NIL2;
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 239) #endif
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 240) 	} else
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 241) 		--s->node_count;
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 242) }
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 243) 
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 244) 
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 245) /***********************************************************************
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 246) //
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 247) ************************************************************************/
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 248) static void swd_accept(lzo_swd_p s, unsigned n)
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 249) {
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 250) 	assert(n <= s->look);
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 251) 
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 252) 	while (n--) {
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 253) 		unsigned key;
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 254) 
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 255) 		swd_remove_node(s,s->rp);
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 256) 
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 257) 		/* add bp into HEAD3 */
6b9f163353 archival/lzo1x_9x.c            (Denys Vlasenko 2010-01-28 02:24:24 +0100 258) 		key = HEAD3(s->b, s->bp);
6b9f163353 archival/lzo1x_9x.c            (Denys Vlasenko 2010-01-28 02:24:24 +0100 259) 		s->succ3[s->bp] = s_get_head3(s, key);
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 260) 		s->head3[key] = s->bp;
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 261) 		s->best3[s->bp] = SWD_F + 1;
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 262) 		s->llen3[key]++;
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 263) 		assert(s->llen3[key] <= SWD_N);
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 264) 
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 265) #ifdef HEAD2
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 266) 		/* add bp into HEAD2 */
6b9f163353 archival/lzo1x_9x.c            (Denys Vlasenko 2010-01-28 02:24:24 +0100 267) 		key = HEAD2(s->b, s->bp);
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 268) 		s->head2[key] = s->bp;
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 269) #endif
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 270) 
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 271) 		swd_getbyte(s);
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 272) 	}
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 273) }
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 274) 
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 275) 
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 276) /***********************************************************************
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 277) //
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 278) ************************************************************************/
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 279) static void swd_search(lzo_swd_p s, unsigned node, unsigned cnt)
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 280) {
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 281) 	const uint8_t *p1;
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 282) 	const uint8_t *p2;
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 283) 	const uint8_t *px;
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 284) 	unsigned m_len = s->m_len;
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 285) 	const uint8_t *b  = s->b;
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 286) 	const uint8_t *bp = s->b + s->bp;
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 287) 	const uint8_t *bx = s->b + s->bp + s->look;
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 288) 	unsigned char scan_end1;
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 289) 
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 290) 	assert(s->m_len > 0);
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 291) 
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 292) 	scan_end1 = bp[m_len - 1];
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 293) 	for ( ; cnt-- > 0; node = s->succ3[node]) {
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 294) 		p1 = bp;
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 295) 		p2 = b + node;
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 296) 		px = bx;
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 297) 
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 298) 		assert(m_len < s->look);
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 299) 
6b9f163353 archival/lzo1x_9x.c            (Denys Vlasenko 2010-01-28 02:24:24 +0100 300) 		if (p2[m_len - 1] == scan_end1
6b9f163353 archival/lzo1x_9x.c            (Denys Vlasenko 2010-01-28 02:24:24 +0100 301) 		 && p2[m_len] == p1[m_len]
6b9f163353 archival/lzo1x_9x.c            (Denys Vlasenko 2010-01-28 02:24:24 +0100 302) 		 && p2[0] == p1[0]
6b9f163353 archival/lzo1x_9x.c            (Denys Vlasenko 2010-01-28 02:24:24 +0100 303) 		 && p2[1] == p1[1]
6b9f163353 archival/lzo1x_9x.c            (Denys Vlasenko 2010-01-28 02:24:24 +0100 304) 		) {
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 305) 			unsigned i;
6b9f163353 archival/lzo1x_9x.c            (Denys Vlasenko 2010-01-28 02:24:24 +0100 306) 			assert(lzo_memcmp(bp, &b[node], 3) == 0);
9038d6f8f5 archival/lzo1x_9x.c            (Denys Vlasenko 2009-07-15 20:02:19 +0200 307) 
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 308) 			p1 += 2; p2 += 2;
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 309) 			do {} while (++p1 < px && *p1 == *++p2);
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 310) 			i = p1-bp;
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 311) 
6b9f163353 archival/lzo1x_9x.c            (Denys Vlasenko 2010-01-28 02:24:24 +0100 312) 			assert(lzo_memcmp(bp, &b[node], i) == 0);
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 313) 
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 314) #if defined(SWD_BEST_OFF)
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 315) 			if (i < SWD_BEST_OFF) {
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 316) 				if (s->best_pos[i] == 0)
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 317) 					s->best_pos[i] = node + 1;
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 318) 			}
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 319) #endif
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 320) 			if (i > m_len) {
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 321) 				s->m_len = m_len = i;
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 322) 				s->m_pos = node;
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 323) 				if (m_len == s->look)
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 324) 					return;
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 325) 				if (m_len >= SWD_F)
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 326) 					return;
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 327) 				if (m_len > (unsigned) s->best3[node])
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 328) 					return;
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 329) 				scan_end1 = bp[m_len - 1];
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 330) 			}
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 331) 		}
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 332) 	}
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 333) }
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 334) 
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 335) 
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 336) /***********************************************************************
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 337) //
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 338) ************************************************************************/
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 339) #ifdef HEAD2
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 340) 
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 341) static int swd_search2(lzo_swd_p s)
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 342) {
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 343) 	unsigned key;
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 344) 
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 345) 	assert(s->look >= 2);
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 346) 	assert(s->m_len > 0);
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 347) 
6b9f163353 archival/lzo1x_9x.c            (Denys Vlasenko 2010-01-28 02:24:24 +0100 348) 	key = s->head2[HEAD2(s->b, s->bp)];
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 349) 	if (key == NIL2)
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 350) 		return 0;
6b9f163353 archival/lzo1x_9x.c            (Denys Vlasenko 2010-01-28 02:24:24 +0100 351) 	assert(lzo_memcmp(&s->b[s->bp], &s->b[key], 2) == 0);
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 352) #if defined(SWD_BEST_OFF)
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 353) 	if (s->best_pos[2] == 0)
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 354) 		s->best_pos[2] = key + 1;
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 355) #endif
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 356) 
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 357) 	if (s->m_len < 2) {
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 358) 		s->m_len = 2;
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 359) 		s->m_pos = key;
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 360) 	}
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 361) 	return 1;
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 362) }
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 363) 
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 364) #endif
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 365) 
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 366) 
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 367) /***********************************************************************
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 368) //
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 369) ************************************************************************/
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 370) static void swd_findbest(lzo_swd_p s)
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 371) {
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 372) 	unsigned key;
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 373) 	unsigned cnt, node;
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 374) 	unsigned len;
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 375) 
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 376) 	assert(s->m_len > 0);
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 377) 
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 378) 	/* get current head, add bp into HEAD3 */
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 379) 	key = HEAD3(s->b,s->bp);
6b9f163353 archival/lzo1x_9x.c            (Denys Vlasenko 2010-01-28 02:24:24 +0100 380) 	node = s->succ3[s->bp] = s_get_head3(s, key);
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 381) 	cnt = s->llen3[key]++;
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 382) 	assert(s->llen3[key] <= SWD_N + SWD_F);
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 383) 	if (cnt > s->max_chain)
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 384) 		cnt = s->max_chain;
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 385) 	s->head3[key] = s->bp;
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 386) 
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 387) 	s->b_char = s->b[s->bp];
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 388) 	len = s->m_len;
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 389) 	if (s->m_len >= s->look) {
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 390) 		if (s->look == 0)
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 391) 			s->b_char = -1;
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 392) 		s->m_off = 0;
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 393) 		s->best3[s->bp] = SWD_F + 1;
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 394) 	} else {
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 395) #ifdef HEAD2
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 396) 		if (swd_search2(s))
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 397) #endif
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 398) 			if (s->look >= 3)
6b9f163353 archival/lzo1x_9x.c            (Denys Vlasenko 2010-01-28 02:24:24 +0100 399) 				swd_search(s, node, cnt);
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 400) 		if (s->m_len > len)
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 401) 			s->m_off = swd_pos2off(s,s->m_pos);
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 402) 		s->best3[s->bp] = s->m_len;
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 403) 
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 404) #if defined(SWD_BEST_OFF)
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 405) 		if (s->use_best_off) {
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 406) 			int i;
6b9f163353 archival/lzo1x_9x.c            (Denys Vlasenko 2010-01-28 02:24:24 +0100 407) 			for (i = 2; i < SWD_BEST_OFF; i++) {
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 408) 				if (s->best_pos[i] > 0)
6b9f163353 archival/lzo1x_9x.c            (Denys Vlasenko 2010-01-28 02:24:24 +0100 409) 					s->best_off[i] = swd_pos2off(s, s->best_pos[i]-1);
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 410) 				else
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 411) 					s->best_off[i] = 0;
6b9f163353 archival/lzo1x_9x.c            (Denys Vlasenko 2010-01-28 02:24:24 +0100 412) 			}
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 413) 		}
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 414) #endif
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 415) 	}
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 416) 
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 417) 	swd_remove_node(s,s->rp);
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 418) 
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 419) #ifdef HEAD2
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 420) 	/* add bp into HEAD2 */
6b9f163353 archival/lzo1x_9x.c            (Denys Vlasenko 2010-01-28 02:24:24 +0100 421) 	key = HEAD2(s->b, s->bp);
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 422) 	s->head2[key] = s->bp;
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 423) #endif
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 424) }
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 425) 
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 426) #undef HEAD3
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 427) #undef HEAD2
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 428) #undef s_get_head3
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 429) 
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 430) 
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 431) /***********************************************************************
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 432) //
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 433) ************************************************************************/
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 434) static int init_match(lzo1x_999_t *c, lzo_swd_p s, uint32_t use_best_off)
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 435) {
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 436) 	int r;
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 437) 
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 438) 	assert(!c->init);
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 439) 	c->init = 1;
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 440) 
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 441) 	s->c = c;
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 442) 
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 443) 	r = swd_init(s);
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 444) 	if (r != 0)
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 445) 		return r;
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 446) 
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 447) 	s->use_best_off = use_best_off;
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 448) 	return r;
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 449) }
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 450) 
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 451) 
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 452) /***********************************************************************
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 453) //
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 454) ************************************************************************/
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 455) static int find_match(lzo1x_999_t *c, lzo_swd_p s,
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 456) 		unsigned this_len, unsigned skip)
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 457) {
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 458) 	assert(c->init);
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 459) 
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 460) 	if (skip > 0) {
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 461) 		assert(this_len >= skip);
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 462) 		swd_accept(s, this_len - skip);
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 463) 	} else {
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 464) 		assert(this_len <= 1);
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 465) 	}
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 466) 
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 467) 	s->m_len = 1;
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 468) #ifdef SWD_BEST_OFF
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 469) 	if (s->use_best_off)
6b9f163353 archival/lzo1x_9x.c            (Denys Vlasenko 2010-01-28 02:24:24 +0100 470) 		memset(s->best_pos, 0, sizeof(s->best_pos));
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 471) #endif
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 472) 	swd_findbest(s);
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 473) 	c->m_len = s->m_len;
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 474) 	c->m_off = s->m_off;
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 475) 
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 476) 	swd_getbyte(s);
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 477) 
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 478) 	if (s->b_char < 0) {
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 479) 		c->look = 0;
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 480) 		c->m_len = 0;
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 481) 	} else {
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 482) 		c->look = s->look + 1;
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 483) 	}
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 484) 	c->bp = c->ip - c->look;
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 485) 
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 486) 	return LZO_E_OK;
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 487) }
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 488) 
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 489) /* this is a public functions, but there is no prototype in a header file */
3d27d435db archival/libarchive/lzo1x_9x.c (Denys Vlasenko 2018-12-27 18:03:20 +0100 490) static int lzo1x_999_compress_internal(const uint8_t *in, unsigned in_len,
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 491) 		uint8_t *out, unsigned *out_len,
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 492) 		void *wrkmem,
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 493) 		unsigned good_length,
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 494) 		unsigned max_lazy,
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 495) 		unsigned max_chain,
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 496) 		uint32_t use_best_off);
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 497) 
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 498) 
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 499) /***********************************************************************
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 500) //
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 501) ************************************************************************/
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 502) static uint8_t *code_match(lzo1x_999_t *c,
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 503) 		uint8_t *op, unsigned m_len, unsigned m_off)
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 504) {
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 505) 	assert(op > c->out);
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 506) 	if (m_len == 2) {
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 507) 		assert(m_off <= M1_MAX_OFFSET);
6b9f163353 archival/lzo1x_9x.c            (Denys Vlasenko 2010-01-28 02:24:24 +0100 508) 		assert(c->r1_lit > 0);
6b9f163353 archival/lzo1x_9x.c            (Denys Vlasenko 2010-01-28 02:24:24 +0100 509) 		assert(c->r1_lit < 4);
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 510) 		m_off -= 1;
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 511) 		*op++ = M1_MARKER | ((m_off & 3) << 2);
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 512) 		*op++ = m_off >> 2;
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 513) 	} else if (m_len <= M2_MAX_LEN && m_off <= M2_MAX_OFFSET) {
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 514) 		assert(m_len >= 3);
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 515) 		m_off -= 1;
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 516) 		*op++ = ((m_len - 1) << 5) | ((m_off & 7) << 2);
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 517) 		*op++ = m_off >> 3;
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 518) 		assert(op[-2] >= M2_MARKER);
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 519) 	} else if (m_len == M2_MIN_LEN && m_off <= MX_MAX_OFFSET && c->r1_lit >= 4) {
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 520) 		assert(m_len == 3);
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 521) 		assert(m_off > M2_MAX_OFFSET);
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 522) 		m_off -= 1 + M2_MAX_OFFSET;
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 523) 		*op++ = M1_MARKER | ((m_off & 3) << 2);
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 524) 		*op++ = m_off >> 2;
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 525) 	} else if (m_off <= M3_MAX_OFFSET) {
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 526) 		assert(m_len >= 3);
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 527) 		m_off -= 1;
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 528) 		if (m_len <= M3_MAX_LEN)
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 529) 			*op++ = M3_MARKER | (m_len - 2);
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 530) 		else {
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 531) 			m_len -= M3_MAX_LEN;
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 532) 			*op++ = M3_MARKER | 0;
6b9f163353 archival/lzo1x_9x.c            (Denys Vlasenko 2010-01-28 02:24:24 +0100 533) 			while (m_len > 255) {
6b9f163353 archival/lzo1x_9x.c            (Denys Vlasenko 2010-01-28 02:24:24 +0100 534) 				m_len -= 255;
6b9f163353 archival/lzo1x_9x.c            (Denys Vlasenko 2010-01-28 02:24:24 +0100 535) 				*op++ = 0;
6b9f163353 archival/lzo1x_9x.c            (Denys Vlasenko 2010-01-28 02:24:24 +0100 536) 			}
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 537) 			assert(m_len > 0);
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 538) 			*op++ = m_len;
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 539) 		}
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 540) 		*op++ = m_off << 2;
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 541) 		*op++ = m_off >> 6;
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 542) 	} else {
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 543) 		unsigned k;
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 544) 
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 545) 		assert(m_len >= 3);
6b9f163353 archival/lzo1x_9x.c            (Denys Vlasenko 2010-01-28 02:24:24 +0100 546) 		assert(m_off > 0x4000);
6b9f163353 archival/lzo1x_9x.c            (Denys Vlasenko 2010-01-28 02:24:24 +0100 547) 		assert(m_off <= 0xbfff);
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 548) 		m_off -= 0x4000;
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 549) 		k = (m_off & 0x4000) >> 11;
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 550) 		if (m_len <= M4_MAX_LEN)
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 551) 			*op++ = M4_MARKER | k | (m_len - 2);
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 552) 		else {
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 553) 			m_len -= M4_MAX_LEN;
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 554) 			*op++ = M4_MARKER | k | 0;
6b9f163353 archival/lzo1x_9x.c            (Denys Vlasenko 2010-01-28 02:24:24 +0100 555) 			while (m_len > 255) {
6b9f163353 archival/lzo1x_9x.c            (Denys Vlasenko 2010-01-28 02:24:24 +0100 556) 				m_len -= 255;
6b9f163353 archival/lzo1x_9x.c            (Denys Vlasenko 2010-01-28 02:24:24 +0100 557) 				*op++ = 0;
6b9f163353 archival/lzo1x_9x.c            (Denys Vlasenko 2010-01-28 02:24:24 +0100 558) 			}
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 559) 			assert(m_len > 0);
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 560) 			*op++ = m_len;
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 561) 		}
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 562) 		*op++ = m_off << 2;
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 563) 		*op++ = m_off >> 6;
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 564) 	}
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 565) 
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 566) 	return op;
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 567) }
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 568) 
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 569) 
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 570) static uint8_t *STORE_RUN(lzo1x_999_t *c, uint8_t *op,
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 571) 		const uint8_t *ii, unsigned t)
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 572) {
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 573) 	if (op == c->out && t <= 238) {
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 574) 		*op++ = 17 + t;
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 575) 	} else if (t <= 3) {
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 576) 		op[-2] |= t;
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 577) 	} else if (t <= 18) {
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 578) 		*op++ = t - 3;
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 579) 	} else {
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 580) 		unsigned tt = t - 18;
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 581) 
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 582) 		*op++ = 0;
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 583) 		while (tt > 255) {
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 584) 			tt -= 255;
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 585) 			*op++ = 0;
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 586) 		}
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 587) 		assert(tt > 0);
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 588) 		*op++ = tt;
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 589) 	}
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 590) 	do *op++ = *ii++; while (--t > 0);
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 591) 
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 592) 	return op;
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 593) }
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 594) 
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 595) 
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 596) static uint8_t *code_run(lzo1x_999_t *c, uint8_t *op, const uint8_t *ii,
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 597) 		unsigned lit)
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 598) {
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 599) 	if (lit > 0) {
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 600) 		assert(m_len >= 2);
6b9f163353 archival/lzo1x_9x.c            (Denys Vlasenko 2010-01-28 02:24:24 +0100 601) 		op = STORE_RUN(c, op, ii, lit);
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 602) 	} else {
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 603) 		assert(m_len >= 3);
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 604) 	}
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 605) 	c->r1_lit = lit;
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 606) 
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 607) 	return op;
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 608) }
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 609) 
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 610) 
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 611) /***********************************************************************
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 612) //
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 613) ************************************************************************/
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 614) static int len_of_coded_match(unsigned m_len, unsigned m_off, unsigned lit)
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 615) {
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 616) 	int n = 4;
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 617) 
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 618) 	if (m_len < 2)
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 619) 		return -1;
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 620) 	if (m_len == 2)
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 621) 		return (m_off <= M1_MAX_OFFSET && lit > 0 && lit < 4) ? 2 : -1;
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 622) 	if (m_len <= M2_MAX_LEN && m_off <= M2_MAX_OFFSET)
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 623) 		return 2;
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 624) 	if (m_len == M2_MIN_LEN && m_off <= MX_MAX_OFFSET && lit >= 4)
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 625) 		return 2;
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 626) 	if (m_off <= M3_MAX_OFFSET) {
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 627) 		if (m_len <= M3_MAX_LEN)
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 628) 			return 3;
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 629) 		m_len -= M3_MAX_LEN;
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 630) 	} else if (m_off <= M4_MAX_OFFSET) {
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 631) 		if (m_len <= M4_MAX_LEN)
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 632) 			return 3;
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 633) 		m_len -= M4_MAX_LEN;
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 634) 	} else
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 635) 		return -1;
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 636) 	while (m_len > 255) {
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 637) 		m_len -= 255;
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 638) 		n++;
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 639) 	}
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 640) 	return n;
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 641) }
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 642) 
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 643) 
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 644) static int min_gain(unsigned ahead, unsigned lit1,
60cb48ca50 archival/libarchive/lzo1x_9x.c (Denys Vlasenko 2013-01-14 15:57:44 +0100 645) 			unsigned lit2, int l1, int l2, int l3)
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 646) {
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 647) 	int lazy_match_min_gain = 0;
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 648) 
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 649) 	assert (ahead >= 1);
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 650) 	lazy_match_min_gain += ahead;
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 651) 
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 652) 	if (lit1 <= 3)
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 653) 		lazy_match_min_gain += (lit2 <= 3) ? 0 : 2;
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 654) 	else if (lit1 <= 18)
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 655) 		lazy_match_min_gain += (lit2 <= 18) ? 0 : 1;
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 656) 
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 657) 	lazy_match_min_gain += (l2 - l1) * 2;
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 658) 	if (l3 > 0)
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 659) 		lazy_match_min_gain -= (ahead - l3) * 2;
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 660) 
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 661) 	if (lazy_match_min_gain < 0)
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 662) 		lazy_match_min_gain = 0;
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 663) 
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 664) 	return lazy_match_min_gain;
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 665) }
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 666) 
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 667) 
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 668) /***********************************************************************
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 669) //
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 670) ************************************************************************/
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 671) #if defined(SWD_BEST_OFF)
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 672) 
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 673) static void better_match(const lzo_swd_p swd,
60cb48ca50 archival/libarchive/lzo1x_9x.c (Denys Vlasenko 2013-01-14 15:57:44 +0100 674) 			unsigned *m_len, unsigned *m_off)
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 675) {
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 676) 	if (*m_len <= M2_MIN_LEN)
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 677) 		return;
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 678) 
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 679) 	if (*m_off <= M2_MAX_OFFSET)
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 680) 		return;
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 681) 
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 682) 	/* M3/M4 -> M2 */
6b9f163353 archival/lzo1x_9x.c            (Denys Vlasenko 2010-01-28 02:24:24 +0100 683) 	if (*m_off > M2_MAX_OFFSET
6b9f163353 archival/lzo1x_9x.c            (Denys Vlasenko 2010-01-28 02:24:24 +0100 684) 	 && *m_len >= M2_MIN_LEN + 1 && *m_len <= M2_MAX_LEN + 1
6b9f163353 archival/lzo1x_9x.c            (Denys Vlasenko 2010-01-28 02:24:24 +0100 685) 	 && swd->best_off[*m_len-1] && swd->best_off[*m_len-1] <= M2_MAX_OFFSET
6b9f163353 archival/lzo1x_9x.c            (Denys Vlasenko 2010-01-28 02:24:24 +0100 686) 	) {
6b9f163353 archival/lzo1x_9x.c            (Denys Vlasenko 2010-01-28 02:24:24 +0100 687) 		*m_len = *m_len - 1;
6b9f163353 archival/lzo1x_9x.c            (Denys Vlasenko 2010-01-28 02:24:24 +0100 688) 		*m_off = swd->best_off[*m_len];
6b9f163353 archival/lzo1x_9x.c            (Denys Vlasenko 2010-01-28 02:24:24 +0100 689) 		return;
6b9f163353 archival/lzo1x_9x.c            (Denys Vlasenko 2010-01-28 02:24:24 +0100 690) 	}
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 691) 
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 692) 	/* M4 -> M2 */
6b9f163353 archival/lzo1x_9x.c            (Denys Vlasenko 2010-01-28 02:24:24 +0100 693) 	if (*m_off > M3_MAX_OFFSET
6b9f163353 archival/lzo1x_9x.c            (Denys Vlasenko 2010-01-28 02:24:24 +0100 694) 	 && *m_len >= M4_MAX_LEN + 1 && *m_len <= M2_MAX_LEN + 2
6b9f163353 archival/lzo1x_9x.c            (Denys Vlasenko 2010-01-28 02:24:24 +0100 695) 	 && swd->best_off[*m_len-2] && swd->best_off[*m_len-2] <= M2_MAX_OFFSET
6b9f163353 archival/lzo1x_9x.c            (Denys Vlasenko 2010-01-28 02:24:24 +0100 696) 	) {
6b9f163353 archival/lzo1x_9x.c            (Denys Vlasenko 2010-01-28 02:24:24 +0100 697) 		*m_len = *m_len - 2;
6b9f163353 archival/lzo1x_9x.c            (Denys Vlasenko 2010-01-28 02:24:24 +0100 698) 		*m_off = swd->best_off[*m_len];
6b9f163353 archival/lzo1x_9x.c            (Denys Vlasenko 2010-01-28 02:24:24 +0100 699) 		return;
6b9f163353 archival/lzo1x_9x.c            (Denys Vlasenko 2010-01-28 02:24:24 +0100 700) 	}
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 701) 	/* M4 -> M3 */
6b9f163353 archival/lzo1x_9x.c            (Denys Vlasenko 2010-01-28 02:24:24 +0100 702) 	if (*m_off > M3_MAX_OFFSET
6b9f163353 archival/lzo1x_9x.c            (Denys Vlasenko 2010-01-28 02:24:24 +0100 703) 	 && *m_len >= M4_MAX_LEN + 1 && *m_len <= M3_MAX_LEN + 1
6b9f163353 archival/lzo1x_9x.c            (Denys Vlasenko 2010-01-28 02:24:24 +0100 704) 	 && swd->best_off[*m_len-1] && swd->best_off[*m_len-1] <= M3_MAX_OFFSET
6b9f163353 archival/lzo1x_9x.c            (Denys Vlasenko 2010-01-28 02:24:24 +0100 705) 	) {
6b9f163353 archival/lzo1x_9x.c            (Denys Vlasenko 2010-01-28 02:24:24 +0100 706) 		*m_len = *m_len - 1;
6b9f163353 archival/lzo1x_9x.c            (Denys Vlasenko 2010-01-28 02:24:24 +0100 707) 		*m_off = swd->best_off[*m_len];
6b9f163353 archival/lzo1x_9x.c            (Denys Vlasenko 2010-01-28 02:24:24 +0100 708) 	}
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 709) }
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 710) 
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 711) #endif
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 712) 
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 713) 
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 714) /***********************************************************************
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 715) //
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 716) ************************************************************************/
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 717) static int lzo1x_999_compress_internal(const uint8_t *in, unsigned in_len,
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 718) 		uint8_t *out, unsigned *out_len,
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 719) 		void *wrkmem,
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 720) 		unsigned good_length,
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 721) 		unsigned max_lazy,
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 722) 		unsigned max_chain,
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 723) 		uint32_t use_best_off)
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 724) {
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 725) 	uint8_t *op;
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 726) 	const uint8_t *ii;
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 727) 	unsigned lit;
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 728) 	unsigned m_len, m_off;
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 729) 	lzo1x_999_t cc;
6b9f163353 archival/lzo1x_9x.c            (Denys Vlasenko 2010-01-28 02:24:24 +0100 730) 	lzo1x_999_t *const c = &cc;
6b9f163353 archival/lzo1x_9x.c            (Denys Vlasenko 2010-01-28 02:24:24 +0100 731) 	const lzo_swd_p swd = (lzo_swd_p) wrkmem;
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 732) 	int r;
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 733) 
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 734) 	c->init = 0;
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 735) 	c->ip = c->in = in;
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 736) 	c->in_end = in + in_len;
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 737) 	c->out = out;
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 738) 
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 739) 	op = out;
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 740) 	ii = c->ip;             /* point to start of literal run */
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 741) 	lit = 0;
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 742) 	c->r1_lit = 0;
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 743) 
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 744) 	r = init_match(c, swd, use_best_off);
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 745) 	if (r != 0)
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 746) 		return r;
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 747) 	swd->max_chain = max_chain;
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 748) 
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 749) 	r = find_match(c, swd, 0, 0);
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 750) 	if (r != 0)
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 751) 		return r;
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 752) 
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 753) 	while (c->look > 0) {
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 754) 		unsigned ahead;
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 755) 		unsigned max_ahead;
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 756) 		int l1, l2, l3;
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 757) 
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 758) 		m_len = c->m_len;
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 759) 		m_off = c->m_off;
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 760) 
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 761) 		assert(c->bp == c->ip - c->look);
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 762) 		assert(c->bp >= in);
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 763) 		if (lit == 0)
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 764) 			ii = c->bp;
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 765) 		assert(ii + lit == c->bp);
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 766) 		assert(swd->b_char == *(c->bp));
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 767) 
6b9f163353 archival/lzo1x_9x.c            (Denys Vlasenko 2010-01-28 02:24:24 +0100 768) 		if (m_len < 2
6b9f163353 archival/lzo1x_9x.c            (Denys Vlasenko 2010-01-28 02:24:24 +0100 769) 		 || (m_len == 2 && (m_off > M1_MAX_OFFSET || lit == 0 || lit >= 4))
6b9f163353 archival/lzo1x_9x.c            (Denys Vlasenko 2010-01-28 02:24:24 +0100 770) 		    /* Do not accept this match for compressed-data compatibility
6b9f163353 archival/lzo1x_9x.c            (Denys Vlasenko 2010-01-28 02:24:24 +0100 771) 		     * with LZO v1.01 and before
6b9f163353 archival/lzo1x_9x.c            (Denys Vlasenko 2010-01-28 02:24:24 +0100 772) 		     * [ might be a problem for decompress() and optimize() ]
6b9f163353 archival/lzo1x_9x.c            (Denys Vlasenko 2010-01-28 02:24:24 +0100 773) 		     */
6b9f163353 archival/lzo1x_9x.c            (Denys Vlasenko 2010-01-28 02:24:24 +0100 774) 		 || (m_len == 2 && op == out)
6b9f163353 archival/lzo1x_9x.c            (Denys Vlasenko 2010-01-28 02:24:24 +0100 775) 		 || (op == out && lit == 0)
6b9f163353 archival/lzo1x_9x.c            (Denys Vlasenko 2010-01-28 02:24:24 +0100 776) 		) {
6b9f163353 archival/lzo1x_9x.c            (Denys Vlasenko 2010-01-28 02:24:24 +0100 777) 			/* a literal */
6b9f163353 archival/lzo1x_9x.c            (Denys Vlasenko 2010-01-28 02:24:24 +0100 778) 			m_len = 0;
6b9f163353 archival/lzo1x_9x.c            (Denys Vlasenko 2010-01-28 02:24:24 +0100 779) 		}
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 780) 		else if (m_len == M2_MIN_LEN) {
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 781) 			/* compression ratio improves if we code a literal in some cases */
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 782) 			if (m_off > MX_MAX_OFFSET && lit >= 4)
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 783) 				m_len = 0;
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 784) 		}
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 785) 
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 786) 		if (m_len == 0) {
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 787) 			/* a literal */
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 788) 			lit++;
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 789) 			swd->max_chain = max_chain;
6b9f163353 archival/lzo1x_9x.c            (Denys Vlasenko 2010-01-28 02:24:24 +0100 790) 			r = find_match(c, swd, 1, 0);
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 791) 			assert(r == 0);
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 792) 			continue;
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 793) 		}
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 794) 
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 795) 		/* a match */
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 796) #if defined(SWD_BEST_OFF)
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 797) 		if (swd->use_best_off)
6b9f163353 archival/lzo1x_9x.c            (Denys Vlasenko 2010-01-28 02:24:24 +0100 798) 			better_match(swd, &m_len, &m_off);
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 799) #endif
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 800) 
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 801) 		/* shall we try a lazy match ? */
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 802) 		ahead = 0;
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 803) 		if (m_len >= max_lazy) {
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 804) 			/* no */
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 805) 			l1 = 0;
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 806) 			max_ahead = 0;
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 807) 		} else {
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 808) 			/* yes, try a lazy match */
6b9f163353 archival/lzo1x_9x.c            (Denys Vlasenko 2010-01-28 02:24:24 +0100 809) 			l1 = len_of_coded_match(m_len, m_off, lit);
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 810) 			assert(l1 > 0);
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 811) 			max_ahead = LZO_MIN(2, (unsigned)l1 - 1);
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 812) 		}
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 813) 
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 814) 
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 815) 		while (ahead < max_ahead && c->look > m_len) {
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 816) 			int lazy_match_min_gain;
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 817) 
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 818) 			if (m_len >= good_length)
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 819) 				swd->max_chain = max_chain >> 2;
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 820) 			else
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 821) 				swd->max_chain = max_chain;
6b9f163353 archival/lzo1x_9x.c            (Denys Vlasenko 2010-01-28 02:24:24 +0100 822) 			r = find_match(c, swd, 1, 0);
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 823) 			ahead++;
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 824) 
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 825) 			assert(r == 0);
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 826) 			assert(c->look > 0);
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 827) 			assert(ii + lit + ahead == c->bp);
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 828) 
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 829) 			if (c->m_len < m_len)
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 830) 				continue;
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 831) 			if (c->m_len == m_len && c->m_off >= m_off)
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 832) 				continue;
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 833) #if defined(SWD_BEST_OFF)
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 834) 			if (swd->use_best_off)
6b9f163353 archival/lzo1x_9x.c            (Denys Vlasenko 2010-01-28 02:24:24 +0100 835) 				better_match(swd, &c->m_len, &c->m_off);
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 836) #endif
6b9f163353 archival/lzo1x_9x.c            (Denys Vlasenko 2010-01-28 02:24:24 +0100 837) 			l2 = len_of_coded_match(c->m_len, c->m_off, lit+ahead);
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 838) 			if (l2 < 0)
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 839) 				continue;
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 840) 
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 841) 			/* compressed-data compatibility [see above] */
6b9f163353 archival/lzo1x_9x.c            (Denys Vlasenko 2010-01-28 02:24:24 +0100 842) 			l3 = (op == out) ? -1 : len_of_coded_match(ahead, m_off, lit);
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 843) 
6b9f163353 archival/lzo1x_9x.c            (Denys Vlasenko 2010-01-28 02:24:24 +0100 844) 			lazy_match_min_gain = min_gain(ahead, lit, lit+ahead, l1, l2, l3);
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 845) 			if (c->m_len >= m_len + lazy_match_min_gain) {
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 846) 				if (l3 > 0) {
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 847) 					/* code previous run */
6b9f163353 archival/lzo1x_9x.c            (Denys Vlasenko 2010-01-28 02:24:24 +0100 848) 					op = code_run(c, op, ii, lit);
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 849) 					lit = 0;
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 850) 					/* code shortened match */
6b9f163353 archival/lzo1x_9x.c            (Denys Vlasenko 2010-01-28 02:24:24 +0100 851) 					op = code_match(c, op, ahead, m_off);
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 852) 				} else {
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 853) 					lit += ahead;
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 854) 					assert(ii + lit == c->bp);
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 855) 				}
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 856) 				goto lazy_match_done;
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 857) 			}
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 858) 		}
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 859) 
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 860) 		assert(ii + lit + ahead == c->bp);
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 861) 
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 862) 		/* 1 - code run */
6b9f163353 archival/lzo1x_9x.c            (Denys Vlasenko 2010-01-28 02:24:24 +0100 863) 		op = code_run(c, op, ii, lit);
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 864) 		lit = 0;
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 865) 
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 866) 		/* 2 - code match */
6b9f163353 archival/lzo1x_9x.c            (Denys Vlasenko 2010-01-28 02:24:24 +0100 867) 		op = code_match(c, op, m_len, m_off);
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 868) 		swd->max_chain = max_chain;
6b9f163353 archival/lzo1x_9x.c            (Denys Vlasenko 2010-01-28 02:24:24 +0100 869) 		r = find_match(c, swd, m_len, 1+ahead);
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 870) 		assert(r == 0);
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 871) 
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 872)  lazy_match_done: ;
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 873) 	}
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 874) 
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 875) 	/* store final run */
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 876) 	if (lit > 0)
6b9f163353 archival/lzo1x_9x.c            (Denys Vlasenko 2010-01-28 02:24:24 +0100 877) 		op = STORE_RUN(c, op, ii, lit);
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 878) 
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 879) #if defined(LZO_EOF_CODE)
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 880) 	*op++ = M4_MARKER | 1;
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 881) 	*op++ = 0;
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 882) 	*op++ = 0;
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 883) #endif
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 884) 
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 885) 	*out_len = op - out;
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 886) 
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 887) 	return LZO_E_OK;
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 888) }
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 889) 
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 890) 
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 891) /***********************************************************************
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 892) //
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 893) ************************************************************************/
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 894) int lzo1x_999_compress_level(const uint8_t *in, unsigned in_len,
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 895) 		uint8_t *out, unsigned *out_len,
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 896) 		void *wrkmem,
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 897) 		int compression_level)
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 898) {
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 899) 	static const struct {
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 900) 		uint16_t good_length;
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 901) 		uint16_t max_lazy;
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 902) 		uint16_t max_chain;
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 903) 		uint16_t use_best_off;
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 904) 	} c[3] = {
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 905) 		{     8,    32,  256,   0 },
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 906) 		{    32,   128, 2048,   1 },
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 907) 		{ SWD_F, SWD_F, 4096,   1 }       /* max. compression */
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 908) 	};
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 909) 
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 910) 	if (compression_level < 7 || compression_level > 9)
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 911) 		return LZO_E_ERROR;
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 912) 
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 913) 	compression_level -= 7;
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 914) 	return lzo1x_999_compress_internal(in, in_len, out, out_len, wrkmem,
60cb48ca50 archival/libarchive/lzo1x_9x.c (Denys Vlasenko 2013-01-14 15:57:44 +0100 915) 					c[compression_level].good_length,
60cb48ca50 archival/libarchive/lzo1x_9x.c (Denys Vlasenko 2013-01-14 15:57:44 +0100 916) 					c[compression_level].max_lazy,
60cb48ca50 archival/libarchive/lzo1x_9x.c (Denys Vlasenko 2013-01-14 15:57:44 +0100 917) 					c[compression_level].max_chain,
60cb48ca50 archival/libarchive/lzo1x_9x.c (Denys Vlasenko 2013-01-14 15:57:44 +0100 918) 					c[compression_level].use_best_off);
052ad9a568 archival/lzo1x_9x.c            (Denis Vlasenko 2009-04-29 12:01:51 +0000 919) }
